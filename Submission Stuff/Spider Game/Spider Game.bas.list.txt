------- FILE C:\Users\erwil\OneDrive\Documents\Fall 2017\LMC 2700\Project 6\Submission Stuff\Spider Game\Spider Game.bas.asm LEVEL 1 PASS 2
      1  fffe					      processor	6502
------- FILE vcs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e ????				      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298 ????				      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE C:\Users\erwil\OneDrive\Documents\Fall 2017\LMC 2700\Project 6\Submission Stuff\Spider Game\Spider Game.bas.asm
------- FILE macro.h LEVEL 2 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE C:\Users\erwil\OneDrive\Documents\Fall 2017\LMC 2700\Project 6\Submission Stuff\Spider Game\Spider Game.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic.h"
      1  10000 ????				       processor	6502
------- FILE vcs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"vcs.h"
      1  10000 ????						; VCS.H
      2  10000 ????						; Version 1.05, 13/November/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_VCS =	105
      5  10000 ????
      6  10000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines hardware registers and memory mapping for the
     11  10000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     16  10000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     17  10000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     18  10000 ????						; with your views.  Please contribute, if you think you can improve this
     19  10000 ????						; file!
     20  10000 ????						;
     21  10000 ????						; Latest Revisions...
     22  10000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     23  10000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     24  10000 ????						;			    This will allow conditional code to verify VCS.H being
     25  10000 ????						;			    used for code assembly.
     26  10000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     27  10000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     28  10000 ????						;			 mirrored reading/writing differences.	This is more a
     29  10000 ????						;			 readability issue, and binary compatibility with disassembled
     30  10000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     31  10000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     32  10000 ????						;			 which was broken by the use of segments in this file, as
     33  10000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     34  10000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     35  10000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     36  10000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     37  10000 ????						;						   it is safe to leave it undefined, and the base address will
     38  10000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     39  10000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     40  10000 ????						;			  - register definitions are now generated through assignment
     41  10000 ????						;			    in uninitialised segments.	This allows a changeable base
     42  10000 ????						;			    address architecture.
     43  10000 ????						; 1.0	22/MAR/2003		Initial release
     44  10000 ????
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????
     48  10000 ????						; TIA_BASE_ADDRESS
     49  10000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     50  10000 ????						; Normally 0, the base address should (externally, before including this file)
     51  10000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     52  10000 ????						; The reason is that this bankswitching scheme treats any access to locations
     53  10000 ????						; < $40 as a bankswitch.
     54  10000 ????
     55  10000 ????			   -	       IFNCONST	TIA_BASE_ADDRESS
     56  10000 ????			   -TIA_BASE_ADDRESS =	0
     57  10000 ????				       ENDIF
     58  10000 ????
     59  10000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     60  10000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     61  10000 ????						; *OR* by declaring the label before including this file, eg:
     62  10000 ????						; TIA_BASE_ADDRESS = $40
     63  10000 ????						;   include "vcs.h"
     64  10000 ????
     65  10000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     66  10000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     67  10000 ????						; for the mirrored ROM hardware registers.
     68  10000 ????
     69  10000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     70  10000 ????						; using the -D command-line switch, as required.  If the addresses are not defined,
     71  10000 ????						; they defaut to the TIA_BASE_ADDRESS.
     72  10000 ????
     73  10000 ????			   -	       IFNCONST	TIA_BASE_READ_ADDRESS
     74  10000 ????			   -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     75  10000 ????				       ENDIF
     76  10000 ????
     77  10000 ????			   -	       IFNCONST	TIA_BASE_WRITE_ADDRESS
     78  10000 ????			   -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     79  10000 ????				       ENDIF
     80  10000 ????
     81  10000 ????						;-------------------------------------------------------------------------------
     82  10000 ????
     83 U002d					      SEG.U	TIA_REGISTERS_WRITE
     84 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     85 U0000
     86 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     87 U0000
     88 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     89 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     90 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     91 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     92 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     93 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     94 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     95 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     96 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     97 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
     98 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
     99 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    100 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    101 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    102 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    103 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    104 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    105 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    106 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    107 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    108 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    109 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    110 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    111 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    112 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    113 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    114 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    115 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    116 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    117 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    118 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    119 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    120 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    121 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    122 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    123 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    124 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    125 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    126 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    127 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    128 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    129 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    130 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    131 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    132 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    133 U002d
    134 U002d							;-------------------------------------------------------------------------------
    135 U002d
    136 U000e					      SEG.U	TIA_REGISTERS_READ
    137 U0000					      ORG	TIA_BASE_READ_ADDRESS
    138 U0000
    139 U0000							;											bit 7	 bit 6
    140 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    141 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    142 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    143 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    144 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    145 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    146 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    147 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    148 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    149 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    150 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    151 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    152 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    153 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    154 U000e
    155 U000e							;-------------------------------------------------------------------------------
    156 U000e
    157 U0298					      SEG.U	RIOT
    158 U0280					      ORG	$280
    159 U0280
    160 U0280							; RIOT MEMORY MAP
    161 U0280
    162 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    163 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    164 U0281
    165 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    166 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    167 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    168 U0284		       00	   INTIM      ds	1	; $284		Timer output
    169 U0285
    170 U0285		       00	   TIMINT     ds	1	; $285
    171 U0286
    172 U0286							; Unused/undefined registers ($285-$294)
    173 U0286
    174 U0286		       00		      ds	1	; $286
    175 U0287		       00		      ds	1	; $287
    176 U0288		       00		      ds	1	; $288
    177 U0289		       00		      ds	1	; $289
    178 U028a		       00		      ds	1	; $28A
    179 U028b		       00		      ds	1	; $28B
    180 U028c		       00		      ds	1	; $28C
    181 U028d		       00		      ds	1	; $28D
    182 U028e		       00		      ds	1	; $28E
    183 U028f		       00		      ds	1	; $28F
    184 U0290		       00		      ds	1	; $290
    185 U0291		       00		      ds	1	; $291
    186 U0292		       00		      ds	1	; $292
    187 U0293		       00		      ds	1	; $293
    188 U0294
    189 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    190 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    191 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    192 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    193 U0298
    194 U0298							;-------------------------------------------------------------------------------
    195 U0298							; The following required for back-compatibility with code which does not use
    196 U0298							; segments.
    197 U0298
    198  10000 ????				       SEG
    199  10000 ????
    200  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 2
      0  10000 ????				       include	"macro.h"
      1  10000 ????						; MACRO.H
      2  10000 ????						; Version 1.05, 13/NOVEMBER/2003
      3  10000 ????
      4  10000 ????		00 69	    VERSION_MACRO =	105
      5  10000 ????
      6  10000 ????						;
      7  10000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
      8  10000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
      9  10000 ????						;
     10  10000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     11  10000 ????						; It is distributed as a companion machine-specific support package
     12  10000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     13  10000 ????						; available at at http://www.atari2600.org/dasm
     14  10000 ????						;
     15  10000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     16  10000 ????						; contents, or would like to add something, please write to me
     17  10000 ????						; (atari2600@taswegian.com) with your contribution.
     18  10000 ????						;
     19  10000 ????						; Latest Revisions...
     20  10000 ????						;
     21  10000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     22  10000 ????						;			    This will allow conditional code to verify MACRO.H being
     23  10000 ????						;			    used for code assembly.
     24  10000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     25  10000 ????						;
     26  10000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     27  10000 ????						;
     28  10000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     29  10000 ????						;			   (standardised macro for vertical synch code)
     30  10000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added.
     31  10000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     32  10000 ????						; 1.0	22/MAR/2003		Initial release
     33  10000 ????
     34  10000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage,
     35  10000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     36  10000 ????						;   If you do not allow illegal opcode usage, you must include this file
     37  10000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     38  10000 ????						;   registers and require them to be defined first).
     39  10000 ????
     40  10000 ????						; Available macros...
     41  10000 ????						;   SLEEP n		 - sleep for n cycles
     42  10000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     43  10000 ????						;   CLEAN_START	 - set machine to known state on startup
     44  10000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     45  10000 ????
     46  10000 ????						;-------------------------------------------------------------------------------
     47  10000 ????						; SLEEP duration
     48  10000 ????						; Original author: Thomas Jentzsch
     49  10000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     50  10000 ????						; useful for code where precise timing is required.
     51  10000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     52  10000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     53  10000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     54  10000 ????
     55  10000 ????				       MAC	sleep
     56  10000 ????			    .CYCLES    SET	{1}
     57  10000 ????
     58  10000 ????				       IF	.CYCLES < 2
     59  10000 ????				       ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     60  10000 ????				       ERR
     61  10000 ????				       ENDIF
     62  10000 ????
     63  10000 ????				       IF	.CYCLES & 1
     64  10000 ????				       IFNCONST	NO_ILLEGAL_OPCODES
     65  10000 ????				       nop	0
     66  10000 ????				       ELSE
     67  10000 ????				       bit	VSYNC
     68  10000 ????				       ENDIF
     69  10000 ????			    .CYCLES    SET	.CYCLES - 3
     70  10000 ????				       ENDIF
     71  10000 ????
     72  10000 ????				       REPEAT	.CYCLES / 2
     73  10000 ????				       nop
     74  10000 ????				       REPEND
     75  10000 ????				       ENDM		;usage: SLEEP n (n>1)
     76  10000 ????
     77  10000 ????						;-------------------------------------------------------------------------------
     78  10000 ????						; VERTICAL_SYNC
     79  10000 ????						; Original author: Manuel Polik
     80  10000 ????						; Inserts the code required for a proper 3 scannline
     81  10000 ????						; vertical sync sequence
     82  10000 ????						;
     83  10000 ????						; Note: Alters the accumulator
     84  10000 ????						;
     85  10000 ????						; IN:
     86  10000 ????						; OUT: A = 1
     87  10000 ????
     88  10000 ????				       MAC	vertical_sync
     89  10000 ????				       LDA	#$02	; A = VSYNC enable
     90  10000 ????				       STA	WSYNC	; Finish current line
     91  10000 ????				       STA	VSYNC	; Start vertical sync
     92  10000 ????				       STA	WSYNC	; 1st line vertical sync
     93  10000 ????				       STA	WSYNC	; 2nd line vertical sync
     94  10000 ????				       LSR		; A = VSYNC disable
     95  10000 ????				       STA	WSYNC	; 3rd line vertical sync
     96  10000 ????				       STA	VSYNC	; Stop vertical sync
     97  10000 ????				       ENDM
     98  10000 ????
     99  10000 ????						;-------------------------------------------------------------------------------
    100  10000 ????						; CLEAN_START
    101  10000 ????						; Original author: Andrew Davie
    102  10000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    103  10000 ????						; Sets stack pointer to $FF, and all registers to 0
    104  10000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    105  10000 ????						; Use as very first section of code on boot (ie: at reset)
    106  10000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    107  10000 ????
    108  10000 ????				       MAC	clean_start
    109  10000 ????				       sei
    110  10000 ????				       cld
    111  10000 ????
    112  10000 ????				       ldx	#0
    113  10000 ????				       txa
    114  10000 ????				       tay
    115  10000 ????			    .CLEAR_STACK dex
    116  10000 ????				       txs
    117  10000 ????				       pha
    118  10000 ????				       bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    119  10000 ????
    120  10000 ????				       ENDM
    121  10000 ????
    122  10000 ????						;-------------------------------------------------------
    123  10000 ????						; SET_POINTER
    124  10000 ????						; Original author: Manuel Rotschkar
    125  10000 ????						;
    126  10000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    127  10000 ????						;
    128  10000 ????						; Usage: SET_POINTER pointer, address
    129  10000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    130  10000 ????						;
    131  10000 ????						; Note: Alters the accumulator, NZ flags
    132  10000 ????						; IN 1: 2 byte RAM location reserved for pointer
    133  10000 ????						; IN 2: absolute address
    134  10000 ????
    135  10000 ????				       MAC	set_pointer
    136  10000 ????			    .POINTER   SET	{1}
    137  10000 ????			    .ADDRESS   SET	{2}
    138  10000 ????
    139  10000 ????				       LDA	#<.ADDRESS	; Get Lowbyte of Address
    140  10000 ????				       STA	.POINTER	; Store in pointer
    141  10000 ????				       LDA	#>.ADDRESS	; Get Hibyte of Address
    142  10000 ????				       STA	.POINTER+1	; Store in pointer+1
    143  10000 ????
    144  10000 ????				       ENDM
    145  10000 ????
    146  10000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
------- FILE 2600basic.h
      5  10000 ????
      6  10000 ????		00 80	    player0x   =	$80
      7  10000 ????		00 81	    player1x   =	$81
      8  10000 ????		00 82	    missile0x  =	$82
      9  10000 ????		00 83	    missile1x  =	$83
     10  10000 ????		00 84	    ballx      =	$84
     11  10000 ????
     12  10000 ????		00 85	    objecty    =	$85
     13  10000 ????		00 85	    player0y   =	$85
     14  10000 ????		00 86	    player1y   =	$86
     15  10000 ????		00 87	    missile1height =	$87
     16  10000 ????		00 88	    missile1y  =	$88
     17  10000 ????		00 89	    bally      =	$89
     18  10000 ????
     19  10000 ????		00 87	    player1color =	$87	; replaces missile 1
     20  10000 ????
     21  10000 ????		00 8a	    player0pointer =	$8A	;uses $8A-$8B
     22  10000 ????		00 8a	    player0pointerlo =	$8A
     23  10000 ????		00 8b	    player0pointerhi =	$8B
     24  10000 ????		00 8c	    player1pointer =	$8C	; $8C-$8D
     25  10000 ????		00 8c	    player1pointerlo =	$8C
     26  10000 ????		00 8d	    player1pointerhi =	$8D
     27  10000 ????
     28  10000 ????		00 8e	    player0height =	$8E
     29  10000 ????		00 8f	    player1height =	$8F
     30  10000 ????		00 90	    missile0height =	$90
     31  10000 ????		00 91	    missile0y  =	$91
     32  10000 ????		00 92	    ballheight =	$92
     33  10000 ????
     34  10000 ????		00 90	    currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     35  10000 ????		00 91	    paddle     =	$91	; replaces missile 0
     36  10000 ????		00 82	    player0colorstore =	$82	; replaces missile 0
     37  10000 ????		00 90	    player0color =	$90	; replaces missile 0
     38  10000 ????
     39  10000 ????		00 93	    score      =	$93	; $93-$95
     40  10000 ????		00 96	    scorepointers =	$96	; $96-$9B = 6 bytes
     41  10000 ????		00 9c	    temp1      =	$9C	;used by kernel.  can be used in program too, but
     42  10000 ????		00 9d	    temp2      =	$9D	;are obliterated when drawscreen is called.
     43  10000 ????		00 9e	    temp3      =	$9E
     44  10000 ????		00 9f	    temp4      =	$9F
     45  10000 ????		00 a0	    temp5      =	$A0
     46  10000 ????		00 a1	    temp6      =	$A1
     47  10000 ????
     48  10000 ????		00 a2	    rand       =	$A2
     49  10000 ????		00 a3	    scorecolor =	$A3
     50  10000 ????
     51  10000 ????		00 a4	    var0       =	$A4
     52  10000 ????		00 a5	    var1       =	$A5
     53  10000 ????		00 a6	    var2       =	$A6
     54  10000 ????		00 a7	    var3       =	$A7
     55  10000 ????		00 a8	    var4       =	$A8
     56  10000 ????		00 a9	    var5       =	$A9
     57  10000 ????		00 aa	    var6       =	$AA
     58  10000 ????		00 ab	    var7       =	$AB
     59  10000 ????		00 ac	    var8       =	$AC
     60  10000 ????		00 ad	    var9       =	$AD
     61  10000 ????		00 ae	    var10      =	$AE
     62  10000 ????		00 af	    var11      =	$AF
     63  10000 ????		00 b0	    var12      =	$B0
     64  10000 ????		00 b1	    var13      =	$B1
     65  10000 ????		00 b2	    var14      =	$B2
     66  10000 ????		00 b3	    var15      =	$B3
     67  10000 ????		00 b4	    var16      =	$B4
     68  10000 ????		00 b5	    var17      =	$B5
     69  10000 ????		00 b6	    var18      =	$B6
     70  10000 ????		00 b7	    var19      =	$B7
     71  10000 ????		00 b8	    var20      =	$B8
     72  10000 ????		00 b9	    var21      =	$B9
     73  10000 ????		00 ba	    var22      =	$BA
     74  10000 ????		00 bb	    var23      =	$BB
     75  10000 ????		00 bc	    var24      =	$BC
     76  10000 ????		00 bd	    var25      =	$BD
     77  10000 ????		00 be	    var26      =	$BE
     78  10000 ????		00 bf	    var27      =	$BF
     79  10000 ????		00 c0	    var28      =	$C0
     80  10000 ????		00 c1	    var29      =	$C1
     81  10000 ????		00 c2	    var30      =	$C2
     82  10000 ????		00 c3	    var31      =	$C3
     83  10000 ????		00 c4	    var32      =	$C4
     84  10000 ????		00 c5	    var33      =	$C5
     85  10000 ????		00 c6	    var34      =	$C6
     86  10000 ????		00 c7	    var35      =	$C7
     87  10000 ????		00 c8	    var36      =	$C8
     88  10000 ????		00 c9	    var37      =	$C9
     89  10000 ????		00 ca	    var38      =	$CA
     90  10000 ????		00 cb	    var39      =	$CB
     91  10000 ????		00 cc	    var40      =	$CC
     92  10000 ????		00 cd	    var41      =	$CD
     93  10000 ????		00 ce	    var42      =	$CE
     94  10000 ????		00 cf	    var43      =	$CF
     95  10000 ????		00 d0	    var44      =	$D0
     96  10000 ????		00 d1	    var45      =	$D1
     97  10000 ????		00 d2	    var46      =	$D2
     98  10000 ????		00 d3	    var47      =	$D3
     99  10000 ????
    100  10000 ????		00 d4	    A	       =	$d4
    101  10000 ????		00 d4	    a	       =	$d4
    102  10000 ????		00 d5	    B	       =	$d5
    103  10000 ????		00 d5	    b	       =	$d5
    104  10000 ????		00 d6	    C	       =	$d6
    105  10000 ????		00 d6	    c	       =	$d6
    106  10000 ????		00 d7	    D	       =	$d7
    107  10000 ????		00 d7	    d	       =	$d7
    108  10000 ????		00 d8	    E	       =	$d8
    109  10000 ????		00 d8	    e	       =	$d8
    110  10000 ????		00 d9	    F	       =	$d9
    111  10000 ????		00 d9	    f	       =	$d9
    112  10000 ????		00 da	    G	       =	$da
    113  10000 ????		00 da	    g	       =	$da
    114  10000 ????		00 db	    H	       =	$db
    115  10000 ????		00 db	    h	       =	$db
    116  10000 ????		00 dc	    I	       =	$dc
    117  10000 ????		00 dc	    i	       =	$dc
    118  10000 ????		00 dd	    J	       =	$dd
    119  10000 ????		00 dd	    j	       =	$dd
    120  10000 ????		00 de	    K	       =	$de
    121  10000 ????		00 de	    k	       =	$de
    122  10000 ????		00 df	    L	       =	$df
    123  10000 ????		00 df	    l	       =	$df
    124  10000 ????		00 e0	    M	       =	$e0
    125  10000 ????		00 e0	    m	       =	$e0
    126  10000 ????		00 e1	    N	       =	$e1
    127  10000 ????		00 e1	    n	       =	$e1
    128  10000 ????		00 e2	    O	       =	$e2
    129  10000 ????		00 e2	    o	       =	$e2
    130  10000 ????		00 e3	    P	       =	$e3
    131  10000 ????		00 e3	    p	       =	$e3
    132  10000 ????		00 e4	    Q	       =	$e4
    133  10000 ????		00 e4	    q	       =	$e4
    134  10000 ????		00 e5	    R	       =	$e5
    135  10000 ????		00 e5	    r	       =	$e5
    136  10000 ????		00 e6	    S	       =	$e6
    137  10000 ????		00 e6	    s	       =	$e6
    138  10000 ????		00 e7	    T	       =	$e7
    139  10000 ????		00 e7	    t	       =	$e7
    140  10000 ????		00 e8	    U	       =	$e8
    141  10000 ????		00 e8	    u	       =	$e8
    142  10000 ????		00 e9	    V	       =	$e9
    143  10000 ????		00 e9	    v	       =	$e9
    144  10000 ????		00 ea	    W	       =	$ea
    145  10000 ????		00 ea	    w	       =	$ea
    146  10000 ????		00 eb	    X	       =	$eb
    147  10000 ????		00 eb	    x	       =	$eb
    148  10000 ????		00 ec	    Y	       =	$ec
    149  10000 ????		00 ec	    y	       =	$ec
    150  10000 ????		00 ed	    Z	       =	$ed
    151  10000 ????		00 ed	    z	       =	$ed
    152  10000 ????
    153  10000 ????		00 ee	    temp7      =	$ee	; This is used to aid in bankswitching
    154  10000 ????		00 ef	    playfieldpos =	$ef
    155  10000 ????
    156  10000 ????						; available for other uses, or if unused, provide more stack space
    157  10000 ????
    158  10000 ????		00 f0	    aux1       =	$f0
    159  10000 ????		00 f1	    aux2       =	$f1
    160  10000 ????		00 f2	    aux3       =	$f2
    161  10000 ????		00 f3	    aux4       =	$f3
    162  10000 ????		00 f4	    aux5       =	$f4
    163  10000 ????		00 f5	    aux6       =	$f5
    164  10000 ????
    165  10000 ????						; playfield color/height pointers
    166  10000 ????		00 f0	    pfcolortable =	$f0	; and $d5
    167  10000 ????		00 f0	    pfheighttable =	$f0	; and $d5
    168  10000 ????						; the above pointers are the same because if color and height are both used together,
    169  10000 ????						; they must used absolute indexed and cannot use pointers
    170  10000 ????
    171  10000 ????		00 f2	    lifepointer =	$f2	; pointer to "lives" shape
    172  10000 ????						; upper 3 bits of $f2 contain the number of lives
    173  10000 ????		00 f4	    lifecolor  =	$f4
    174  10000 ????		00 f3	    lives      =	$f3	; # lives >> 5
    175  10000 ????		00 f5	    statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    176  10000 ????
    177  10000 ????		00 f2	    pfscore1   =	$f2	; optional playfield bytes in score
    178  10000 ????		00 f3	    pfscore2   =	$f3
    179  10000 ????		00 f4	    pfscorecolor =	$f4
    180  10000 ????
    181  10000 ????		00 f6	    stack1     =	$f6
    182  10000 ????		00 f7	    stack2     =	$f7
    183  10000 ????		00 f8	    stack3     =	$f8
    184  10000 ????		00 f9	    stack4     =	$f9
    185  10000 ????						; the stack bytes above may be used in the kernel
    186  10000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    187  10000 ????
    188  10000 ????				       MAC	return
    189  10000 ????				       ifnconst	bankswitch
    190  10000 ????				       rts
    191  10000 ????				       else
    192  10000 ????				       jmp	BS_return
    193  10000 ????				       endif
    194  10000 ????				       ENDM		; auto-return from either a regular or bankswitched module
    195  10000 ????
    196  10000 ????			   -	       ifconst	superchip
    197  10000 ????			   -playfieldbase =	$10D0
    198  10000 ????			   -	       include	superchip.h
    199  10000 ????				       else
    200  10000 ????		00 a4	    playfieldbase =	$A4
    201  10000 ????				       endif
    202  10000 ????
    203  10000 ????				       ifnconst	pfhalfwidth
    204  10000 ????		00 04	    pfwidth    =	4
    205  10000 ????		00 0e	    PF1L       =	PF1
    206  10000 ????		00 0f	    PF2L       =	PF2
    207  10000 ????		00 0e	    PF1R       =	PF1
    208  10000 ????		00 0f	    PF2R       =	PF2
    209  10000 ????		00 00	    pfadjust   =	0
    210  10000 ????			   -	       else
    211  10000 ????			   -pfwidth    =	2
    212  10000 ????			   -	       ifconst	pfcenter
    213  10000 ????			   -PF1L       =	$3F	; no effect
    214  10000 ????			   -PF2L       =	PF2
    215  10000 ????			   -PF1R       =	$3F
    216  10000 ????			   -PF2R       =	PF2	; no effect
    217  10000 ????			   -pfadjust   =	1
    218  10000 ????			   -	       else
    219  10000 ????			   -PF1L       =	PF1
    220  10000 ????			   -PF2L       =	PF2
    221  10000 ????			   -PF1R       =	$3F	; no effect
    222  10000 ????			   -PF2R       =	$3F	; no effect
    223  10000 ????			   -pfadjust   =	0
    224  10000 ????			   -	       endif
    225  10000 ????				       endif
    226  10000 ????
    227  10000 ????						; define playfield start based on height
    228  10000 ????				       ifnconst	pfres
    229  10000 ????		00 a4	    playfield  =	playfieldbase
    230  10000 ????			   -	       else
    231  10000 ????			   -playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    232  10000 ????				       endif
------- FILE C:\Users\erwil\OneDrive\Documents\Fall 2017\LMC 2700\Project 6\Submission Stuff\Spider Game\Spider Game.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 2
      0  10000 ????				       include	"2600basic_variable_redefs.h"
      1  10000 ????						; This file contains variable mapping and other information for the current project.
      2  10000 ????
------- FILE C:\Users\erwil\OneDrive\Documents\Fall 2017\LMC 2700\Project 6\Submission Stuff\Spider Game\Spider Game.bas.asm
      6  10000 ????			   -	       ifconst	bankswitch
      7  10000 ????			   -	       if	bankswitch == 8
      8  10000 ????			   -	       ORG	$1000
      9  10000 ????			   -	       RORG	$D000
     10  10000 ????			   -	       endif
     11  10000 ????			   -	       if	bankswitch == 16
     12  10000 ????			   -	       ORG	$1000
     13  10000 ????			   -	       RORG	$9000
     14  10000 ????			   -	       endif
     15  10000 ????			   -	       if	bankswitch == 32
     16  10000 ????			   -	       ORG	$1000
     17  10000 ????			   -	       RORG	$1000
     18  10000 ????			   -	       endif
     19  10000 ????			   -	       if	bankswitch == 64
     20  10000 ????			   -	       ORG	$1000
     21  10000 ????			   -	       RORG	$1000
     22  10000 ????			   -	       endif
     23  10000 ????				       else
     24  f000					      ORG	$F000
     25  f000					      endif
     26  f000
     27  f000				  -	      ifconst	bankswitch_hotspot
     28  f000				  -	      if	bankswitch_hotspot = $083F	; 0840 bankswitching hotspot
     29  f000				  -	      .byte	0	; stop unexpected bankswitches
     30  f000				  -	      endif
     31  f000					      endif
     32  f000				   start
     33  f000		       78		      sei
     34  f001		       d8		      cld
     35  f002		       a0 00		      ldy	#0
     36  f004		       a5 d0		      lda	$D0
     37  f006		       c9 2c		      cmp	#$2C	;check RAM location #1
     38  f008		       d0 07		      bne	MachineIs2600
     39  f00a		       a5 d1		      lda	$D1
     40  f00c		       c9 a9		      cmp	#$A9	;check RAM location #2
     41  f00e		       d0 01		      bne	MachineIs2600
     42  f010		       88		      dey
     43  f011				   MachineIs2600
     44  f011		       a2 00		      ldx	#0
     45  f013		       8a		      txa
     46  f014				   clearmem
     47  f014		       e8		      inx
     48  f015		       9a		      txs
     49  f016		       48		      pha
     50  f017		       d0 fb		      bne	clearmem
     51  f019		       84 9c		      sty	temp1
     52  f01b					      ifnconst	multisprite
     53  f01b				  -	      ifconst	pfrowheight
     54  f01b				  -	      lda	#pfrowheight
     55  f01b					      else
     56  f01b				  -	      ifconst	pfres
     57  f01b				  -	      lda	#(96/pfres)
     58  f01b					      else
     59  f01b		       a9 08		      lda	#8
     60  f01d					      endif
     61  f01d					      endif
     62  f01d		       85 ef		      sta	playfieldpos
     63  f01f					      endif
     64  f01f		       a2 05		      ldx	#5
     65  f021				   initscore
     66  f021		       a9 9c		      lda	#<scoretable
     67  f023		       95 96		      sta	scorepointers,x
     68  f025		       ca		      dex
     69  f026		       10 f9		      bpl	initscore
     70  f028		       a9 01		      lda	#1
     71  f02a		       85 0a		      sta	CTRLPF
     72  f02c		       0d 84 02 	      ora	INTIM
     73  f02f		       85 a2		      sta	rand
     74  f031
     75  f031				  -	      ifconst	multisprite
     76  f031				  -	      jsr	multisprite_setup
     77  f031					      endif
     78  f031
     79  f031					      ifnconst	bankswitch
     80  f031		       4c 5d f4 	      jmp	game
     81  f034				  -	      else
     82  f034				  -	      lda	#>(game-1)
     83  f034				  -	      pha
     84  f034				  -	      lda	#<(game-1)
     85  f034				  -	      pha
     86  f034				  -	      pha
     87  f034				  -	      pha
     88  f034				  -	      ldx	#1
     89  f034				  -	      jmp	BS_jsr
     90  f034					      endif
     91  f034							; This is a 2-line kernel!
     92  f034					      ifnconst	vertical_reflect
     93  f034				   kernel
     94  f034					      endif
     95  f034		       85 02		      sta	WSYNC
     96  f036		       a9 ff		      lda	#255
     97  f038		       8d 96 02 	      sta	TIM64T
     98  f03b
     99  f03b		       a9 01		      lda	#1
    100  f03d		       85 27		      sta	VDELBL
    101  f03f		       85 25		      sta	VDELP0
    102  f041		       a6 92		      ldx	ballheight
    103  f043		       e8		      inx
    104  f044		       e8		      inx
    105  f045		       86 9f		      stx	temp4
    106  f047		       a5 86		      lda	player1y
    107  f049		       85 9e		      sta	temp3
    108  f04b
    109  f04b				  -	      ifconst	shakescreen
    110  f04b				  -	      jsr	doshakescreen
    111  f04b					      else
    112  f04b		       a6 90		      ldx	missile0height
    113  f04d		       e8		      inx
    114  f04e					      endif
    115  f04e
    116  f04e		       e8		      inx
    117  f04f		       86 f6		      stx	stack1
    118  f051
    119  f051		       a5 89		      lda	bally
    120  f053		       85 f7		      sta	stack2
    121  f055
    122  f055		       a5 85		      lda	player0y
    123  f057		       a2 00		      ldx	#0
    124  f059		       85 02		      sta	WSYNC
    125  f05b		       86 1b		      stx	GRP0
    126  f05d		       86 1c		      stx	GRP1
    127  f05f		       86 0e		      stx	PF1L
    128  f061		       86 0f		      stx	PF2
    129  f063		       86 2c		      stx	CXCLR
    130  f065				  -	      ifconst	readpaddle
    131  f065				  -	      stx	paddle
    132  f065					      else
      0  f065					      sleep	3
      1  f065				   .CYCLES    SET	3
      2  f065
      3  f065				  -	      IF	.CYCLES < 2
      4  f065				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f065				  -	      ERR
      6  f065					      ENDIF
      7  f065
      8  f065					      IF	.CYCLES & 1
      9  f065					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f065		       04 00		      nop	0
     11  f067				  -	      ELSE
     12  f067				  -	      bit	VSYNC
     13  f067					      ENDIF
     14  f067				   .CYCLES    SET	.CYCLES - 3
     15  f067					      ENDIF
     16  f067
     17  f067				  -	      REPEAT	.CYCLES / 2
     18  f067				  -	      nop
     19  f067					      REPEND
    134  f067					      endif
    135  f067
    136  f067		       95 9d		      sta	temp2,x
    137  f069
    138  f069							;store these so they can be retrieved later
    139  f069					      ifnconst	pfres
    140  f069		       a2 54		      ldx	#128-44+(4-pfwidth)*12
    141  f06b				  -	      else
    142  f06b				  -	      ldx	#132-pfres*pfwidth
    143  f06b					      endif
    144  f06b
    145  f06b		       c6 85		      dec	player0y
    146  f06d
    147  f06d		       a5 91		      lda	missile0y
    148  f06f		       85 a0		      sta	temp5
    149  f071		       a5 88		      lda	missile1y
    150  f073		       85 a1		      sta	temp6
    151  f075
    152  f075		       a5 ef		      lda	playfieldpos
    153  f077		       85 9c		      sta	temp1
    154  f079
    155  f079				  -	      ifconst	pfrowheight
    156  f079				  -	      lda	#pfrowheight+2
    157  f079					      else
    158  f079					      ifnconst	pfres
    159  f079		       a9 0a		      lda	#10
    160  f07b				  -	      else
    161  f07b				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    162  f07b					      endif
    163  f07b					      endif
    164  f07b		       18		      clc
    165  f07c		       e5 ef		      sbc	playfieldpos
    166  f07e		       85 ef		      sta	playfieldpos
    167  f080		       4c a8 f0 	      jmp	.startkernel
    168  f083
    169  f083				   .skipDrawP0
    170  f083		       a9 00		      lda	#0
    171  f085		       a8		      tay
    172  f086		       4c d6 f0 	      jmp	.continueP0
    173  f089
    174  f089				   .skipDrawP1
    175  f089		       a9 00		      lda	#0
    176  f08b		       a8		      tay
    177  f08c		       4c b2 f0 	      jmp	.continueP1
    178  f08f
    179  f08f				   .kerloop		; enter at cycle 59??
    180  f08f
    181  f08f				   continuekernel
      0  f08f					      sleep	2
      1  f08f				   .CYCLES    SET	2
      2  f08f
      3  f08f				  -	      IF	.CYCLES < 2
      4  f08f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f08f				  -	      ERR
      6  f08f					      ENDIF
      7  f08f
      8  f08f				  -	      IF	.CYCLES & 1
      9  f08f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f08f				  -	      nop	0
     11  f08f				  -	      ELSE
     12  f08f				  -	      bit	VSYNC
     13  f08f				  -	      ENDIF
     14  f08f				  -.CYCLES    SET	.CYCLES - 3
     15  f08f					      ENDIF
     16  f08f
     17  f08f					      REPEAT	.CYCLES / 2
     18  f08f		       ea		      nop
     19  f090					      REPEND
    183  f090				   continuekernel2
    184  f090		       a5 92		      lda	ballheight
    185  f092
    186  f092				  -	      ifconst	pfres
    187  f092				  -	      ldy	playfield+pfres*pfwidth-132,x
    188  f092				  -	      sty	PF1L	;3
    189  f092				  -	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
    190  f092				  -	      sty	PF2L	;3
    191  f092				  -	      ldy	playfield+pfres*pfwidth-129,x
    192  f092				  -	      sty	PF1R	; 3 too early?
    193  f092				  -	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
    194  f092				  -	      sty	PF2R	;3
    195  f092					      else
    196  f092		       b4 50		      ldy	playfield-48+pfwidth*12+44-128,x
    197  f094		       84 0e		      sty	PF1L	;3
    198  f096		       b4 51		      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    199  f098		       84 0f		      sty	PF2L	;3
    200  f09a		       b4 53		      ldy	playfield-48+pfwidth*12+47-128,x	;4
    201  f09c		       84 0e		      sty	PF1R	; 3 too early?
    202  f09e		       b4 52		      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    203  f0a0		       84 0f		      sty	PF2R	;3
    204  f0a2					      endif
    205  f0a2
    206  f0a2							; should be playfield+$38 for width=2
    207  f0a2
    208  f0a2		       c7 89		      dcp	bally
    209  f0a4		       2a		      rol
    210  f0a5		       2a		      rol
    211  f0a6							; rol
    212  f0a6							; rol
    213  f0a6				   goback
    214  f0a6		       85 1f		      sta	ENABL
    215  f0a8				   .startkernel
    216  f0a8		       a5 8f		      lda	player1height	;3
    217  f0aa		       c7 86		      dcp	player1y	;5
    218  f0ac		       90 db		      bcc	.skipDrawP1	;2
    219  f0ae		       a4 86		      ldy	player1y	;3
    220  f0b0		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    221  f0b2							; so it doesn't cross a page boundary!
    222  f0b2
    223  f0b2				   .continueP1
    224  f0b2		       85 1c		      sta	GRP1	;3
    225  f0b4
    226  f0b4					      ifnconst	player1colors
    227  f0b4		       a5 87		      lda	missile1height	;3
    228  f0b6		       c7 88		      dcp	missile1y	;5
    229  f0b8		       2a		      rol		;2
    230  f0b9		       2a		      rol		;2
    231  f0ba		       85 1e		      sta	ENAM1	;3
    232  f0bc				  -	      else
    233  f0bc				  -	      lda	(player1color),y
    234  f0bc				  -	      sta	COLUP1
    235  f0bc				  -	      ifnconst	playercolors
    236  f0bc				  -	      sleep	7
    237  f0bc				  -	      else
    238  f0bc				  -	      lda.w	player0colorstore
    239  f0bc				  -	      sta	COLUP0
    240  f0bc				  -	      endif
    241  f0bc					      endif
    242  f0bc
    243  f0bc				  -	      ifconst	pfres
    244  f0bc				  -	      lda	playfield+pfres*pfwidth-132,x
    245  f0bc				  -	      sta	PF1L	;3
    246  f0bc				  -	      lda	playfield+pfres*pfwidth-131-pfadjust,x
    247  f0bc				  -	      sta	PF2L	;3
    248  f0bc				  -	      lda	playfield+pfres*pfwidth-129,x
    249  f0bc				  -	      sta	PF1R	; 3 too early?
    250  f0bc				  -	      lda	playfield+pfres*pfwidth-130-pfadjust,x
    251  f0bc				  -	      sta	PF2R	;3
    252  f0bc					      else
    253  f0bc		       b5 50		      lda	playfield-48+pfwidth*12+44-128,x	;4
    254  f0be		       85 0e		      sta	PF1L	;3
    255  f0c0		       b5 51		      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
    256  f0c2		       85 0f		      sta	PF2L	;3
    257  f0c4		       b5 53		      lda	playfield-48+pfwidth*12+47-128,x	;4
    258  f0c6		       85 0e		      sta	PF1R	; 3 too early?
    259  f0c8		       b5 52		      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
    260  f0ca		       85 0f		      sta	PF2R	;3
    261  f0cc					      endif
    262  f0cc							; sleep 3
    263  f0cc
    264  f0cc		       a5 8e		      lda	player0height
    265  f0ce		       c7 85		      dcp	player0y
    266  f0d0		       90 b1		      bcc	.skipDrawP0
    267  f0d2		       a4 85		      ldy	player0y
    268  f0d4		       b1 8a		      lda	(player0pointer),y
    269  f0d6				   .continueP0
    270  f0d6		       85 1b		      sta	GRP0
    271  f0d8
    272  f0d8					      ifnconst	no_blank_lines
    273  f0d8					      ifnconst	playercolors
    274  f0d8		       a5 90		      lda	missile0height	;3
    275  f0da		       c7 91		      dcp	missile0y	;5
    276  f0dc		       e5 f6		      sbc	stack1
    277  f0de		       85 1d		      sta	ENAM0	;3
    278  f0e0				  -	      else
    279  f0e0				  -	      lda	(player0color),y
    280  f0e0				  -	      sta	player0colorstore
    281  f0e0				  -	      sleep	6
    282  f0e0					      endif
    283  f0e0		       c6 9c		      dec	temp1
    284  f0e2		       d0 ab		      bne	continuekernel
    285  f0e4				  -	      else
    286  f0e4				  -	      dec	temp1
    287  f0e4				  -	      beq	altkernel2
    288  f0e4				  -	      ifconst	readpaddle
    289  f0e4				  -	      ldy	currentpaddle
    290  f0e4				  -	      lda	INPT0,y
    291  f0e4				  -	      bpl	noreadpaddle
    292  f0e4				  -	      inc	paddle
    293  f0e4				  -	      jmp	continuekernel2
    294  f0e4				  -noreadpaddle
    295  f0e4				  -	      sleep	2
    296  f0e4				  -	      jmp	continuekernel
    297  f0e4				  -	      else
    298  f0e4				  -	      ifnconst	playercolors
    299  f0e4				  -	      ifconst	PFcolors
    300  f0e4				  -	      txa
    301  f0e4				  -	      tay
    302  f0e4				  -	      lda	(pfcolortable),y
    303  f0e4				  -	      ifnconst	backgroundchange
    304  f0e4				  -	      sta	COLUPF
    305  f0e4				  -	      else
    306  f0e4				  -	      sta	COLUBK
    307  f0e4				  -	      endif
    308  f0e4				  -	      jmp	continuekernel
    309  f0e4				  -	      else
    310  f0e4				  -	      ifconst	kernelmacrodef
    311  f0e4				  -	      kernelmacro
    312  f0e4				  -	      else
    313  f0e4				  -	      sleep	12
    314  f0e4				  -	      endif
    315  f0e4				  -	      endif
    316  f0e4				  -	      else
    317  f0e4				  -	      lda	(player0color),y
    318  f0e4				  -	      sta	player0colorstore
    319  f0e4				  -	      sleep	4
    320  f0e4				  -	      endif
    321  f0e4				  -	      jmp	continuekernel
    322  f0e4				  -	      endif
    323  f0e4				  -altkernel2
    324  f0e4				  -	      txa
    325  f0e4				  -	      ifnconst	vertical_reflect
    326  f0e4				  -	      sbx	#256-pfwidth
    327  f0e4				  -	      else
    328  f0e4				  -	      sbx	#256-pfwidth/2
    329  f0e4				  -	      endif
    330  f0e4				  -	      bmi	lastkernelline
    331  f0e4				  -	      ifconst	pfrowheight
    332  f0e4				  -	      lda	#pfrowheight
    333  f0e4				  -	      else
    334  f0e4				  -	      ifnconst	pfres
    335  f0e4				  -	      lda	#8
    336  f0e4				  -	      else
    337  f0e4				  -	      lda	#(96/pfres)	; try to come close to the real size
    338  f0e4				  -	      endif
    339  f0e4				  -	      endif
    340  f0e4				  -	      sta	temp1
    341  f0e4				  -	      jmp	continuekernel
    342  f0e4					      endif
    343  f0e4
    344  f0e4				   altkernel
    345  f0e4
    346  f0e4				  -	      ifconst	PFmaskvalue
    347  f0e4				  -	      lda	#PFmaskvalue
    348  f0e4					      else
    349  f0e4		       a9 00		      lda	#0
    350  f0e6					      endif
    351  f0e6		       85 0e		      sta	PF1L
    352  f0e8		       85 0f		      sta	PF2
    353  f0ea
    354  f0ea
    355  f0ea							;sleep 3
    356  f0ea
    357  f0ea							;28 cycles to fix things
    358  f0ea							;minus 11=17
    359  f0ea
    360  f0ea							; lax temp4
    361  f0ea							; clc
    362  f0ea		       8a		      txa
    363  f0eb					      ifnconst	vertical_reflect
    364  f0eb		       cb fc		      sbx	#256-pfwidth
    365  f0ed				  -	      else
    366  f0ed				  -	      sbx	#256-pfwidth/2
    367  f0ed					      endif
    368  f0ed
    369  f0ed		       30 12		      bmi	lastkernelline
    370  f0ef
    371  f0ef				  -	      ifconst	PFcolorandheight
    372  f0ef				  -	      ifconst	pfres
    373  f0ef				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
    374  f0ef				  -	      else
    375  f0ef				  -	      ldy	playfieldcolorandheight-87,x
    376  f0ef				  -	      endif
    377  f0ef				  -	      ifnconst	backgroundchange
    378  f0ef				  -	      sty	COLUPF
    379  f0ef				  -	      else
    380  f0ef				  -	      sty	COLUBK
    381  f0ef				  -	      endif
    382  f0ef				  -	      ifconst	pfres
    383  f0ef				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
    384  f0ef				  -	      else
    385  f0ef				  -	      lda	playfieldcolorandheight-88,x
    386  f0ef				  -	      endif
    387  f0ef				  -	      sta.w	temp1
    388  f0ef					      endif
    389  f0ef				  -	      ifconst	PFheights
    390  f0ef				  -	      lsr
    391  f0ef				  -	      lsr
    392  f0ef				  -	      tay
    393  f0ef				  -	      lda	(pfheighttable),y
    394  f0ef				  -	      sta.w	temp1
    395  f0ef					      endif
    396  f0ef				  -	      ifconst	PFcolors
    397  f0ef				  -	      tay
    398  f0ef				  -	      lda	(pfcolortable),y
    399  f0ef				  -	      ifnconst	backgroundchange
    400  f0ef				  -	      sta	COLUPF
    401  f0ef				  -	      else
    402  f0ef				  -	      sta	COLUBK
    403  f0ef				  -	      endif
    404  f0ef				  -	      ifconst	pfrowheight
    405  f0ef				  -	      lda	#pfrowheight
    406  f0ef				  -	      else
    407  f0ef				  -	      ifnconst	pfres
    408  f0ef				  -	      lda	#8
    409  f0ef				  -	      else
    410  f0ef				  -	      lda	#(96/pfres)	; try to come close to the real size
    411  f0ef				  -	      endif
    412  f0ef				  -	      endif
    413  f0ef				  -	      sta	temp1
    414  f0ef					      endif
    415  f0ef					      ifnconst	PFcolorandheight
    416  f0ef					      ifnconst	PFcolors
    417  f0ef					      ifnconst	PFheights
    418  f0ef					      ifnconst	no_blank_lines
    419  f0ef							; read paddle 0
    420  f0ef							; lo-res paddle read
    421  f0ef							; bit INPT0
    422  f0ef							; bmi paddleskipread
    423  f0ef							; inc paddle0
    424  f0ef							;donepaddleskip
      0  f0ef					      sleep	10
      1  f0ef				   .CYCLES    SET	10
      2  f0ef
      3  f0ef				  -	      IF	.CYCLES < 2
      4  f0ef				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f0ef				  -	      ERR
      6  f0ef					      ENDIF
      7  f0ef
      8  f0ef				  -	      IF	.CYCLES & 1
      9  f0ef				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f0ef				  -	      nop	0
     11  f0ef				  -	      ELSE
     12  f0ef				  -	      bit	VSYNC
     13  f0ef				  -	      ENDIF
     14  f0ef				  -.CYCLES    SET	.CYCLES - 3
     15  f0ef					      ENDIF
     16  f0ef
     17  f0ef					      REPEAT	.CYCLES / 2
     18  f0ef		       ea		      nop
     17  f0ef					      REPEND
     18  f0f0		       ea		      nop
     17  f0f0					      REPEND
     18  f0f1		       ea		      nop
     17  f0f1					      REPEND
     18  f0f2		       ea		      nop
     17  f0f2					      REPEND
     18  f0f3		       ea		      nop
     19  f0f4					      REPEND
    426  f0f4				  -	      ifconst	pfrowheight
    427  f0f4				  -	      lda	#pfrowheight
    428  f0f4					      else
    429  f0f4					      ifnconst	pfres
    430  f0f4		       a9 08		      lda	#8
    431  f0f6				  -	      else
    432  f0f6				  -	      lda	#(96/pfres)	; try to come close to the real size
    433  f0f6					      endif
    434  f0f6					      endif
    435  f0f6		       85 9c		      sta	temp1
    436  f0f8					      endif
    437  f0f8					      endif
    438  f0f8					      endif
    439  f0f8					      endif
    440  f0f8
    441  f0f8
    442  f0f8		       a5 92		      lda	ballheight
    443  f0fa		       c7 89		      dcp	bally
    444  f0fc		       e5 9f		      sbc	temp4
    445  f0fe
    446  f0fe
    447  f0fe		       4c a6 f0 	      jmp	goback
    448  f101
    449  f101
    450  f101					      ifnconst	no_blank_lines
    451  f101				   lastkernelline
    452  f101					      ifnconst	PFcolors
      0  f101					      sleep	10
      1  f101				   .CYCLES    SET	10
      2  f101
      3  f101				  -	      IF	.CYCLES < 2
      4  f101				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f101				  -	      ERR
      6  f101					      ENDIF
      7  f101
      8  f101				  -	      IF	.CYCLES & 1
      9  f101				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f101				  -	      nop	0
     11  f101				  -	      ELSE
     12  f101				  -	      bit	VSYNC
     13  f101				  -	      ENDIF
     14  f101				  -.CYCLES    SET	.CYCLES - 3
     15  f101					      ENDIF
     16  f101
     17  f101					      REPEAT	.CYCLES / 2
     18  f101		       ea		      nop
     17  f101					      REPEND
     18  f102		       ea		      nop
     17  f102					      REPEND
     18  f103		       ea		      nop
     17  f103					      REPEND
     18  f104		       ea		      nop
     17  f104					      REPEND
     18  f105		       ea		      nop
     19  f106					      REPEND
    454  f106				  -	      else
    455  f106				  -	      ldy	#124
    456  f106				  -	      lda	(pfcolortable),y
    457  f106				  -	      sta	COLUPF
    458  f106					      endif
    459  f106
    460  f106				  -	      ifconst	PFheights
    461  f106				  -	      ldx	#1
    462  f106				  -			;sleep 4
    463  f106				  -	      sleep	3	; REVENG - this was over 1 cycle
    464  f106					      else
    465  f106		       a6 ef		      ldx	playfieldpos
    466  f108							;sleep 3
      0  f108					      sleep	2	; REVENG - this was over 1 cycle
      1  f108				   .CYCLES    SET	2
      2  f108
      3  f108				  -	      IF	.CYCLES < 2
      4  f108				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f108				  -	      ERR
      6  f108					      ENDIF
      7  f108
      8  f108				  -	      IF	.CYCLES & 1
      9  f108				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f108				  -	      nop	0
     11  f108				  -	      ELSE
     12  f108				  -	      bit	VSYNC
     13  f108				  -	      ENDIF
     14  f108				  -.CYCLES    SET	.CYCLES - 3
     15  f108					      ENDIF
     16  f108
     17  f108					      REPEAT	.CYCLES / 2
     18  f108		       ea		      nop
     19  f109					      REPEND
    468  f109					      endif
    469  f109
    470  f109		       4c 27 f1 	      jmp	enterlastkernel
    471  f10c
    472  f10c				  -	      else
    473  f10c				  -lastkernelline
    474  f10c				  -
    475  f10c				  -	      ifconst	PFheights
    476  f10c				  -	      ldx	#1
    477  f10c				  -			;sleep 5
    478  f10c				  -	      sleep	4	; REVENG - this was over 1 cycle
    479  f10c				  -	      else
    480  f10c				  -	      ldx	playfieldpos
    481  f10c				  -			;sleep 4
    482  f10c				  -	      sleep	3	; REVENG - this was over 1 cycle
    483  f10c				  -	      endif
    484  f10c				  -
    485  f10c				  -	      cpx	#0
    486  f10c				  -	      bne	.enterfromNBL
    487  f10c				  -	      jmp	no_blank_lines_bailout
    488  f10c					      endif
    489  f10c
    490  f10c				  -	      if	((<*)>$d5)
    491  f10c				  -	      align	256
    492  f10c					      endif
    493  f10c							; this is a kludge to prevent page wrapping - fix!!!
    494  f10c
    495  f10c				   .skipDrawlastP1
    496  f10c		       a9 00		      lda	#0
    497  f10e		       a8		      tay		; REVENG - added so we don't cross a page
    498  f10f		       4c 39 f1 	      jmp	.continuelastP1
    499  f112
    500  f112				   .endkerloop		; enter at cycle 59??
    501  f112
    502  f112		       ea		      nop
    503  f113
    504  f113				   .enterfromNBL
    505  f113				  -	      ifconst	pfres
    506  f113				  -	      ldy.w	playfield+pfres*pfwidth-4
    507  f113				  -	      sty	PF1L	;3
    508  f113				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    509  f113				  -	      sty	PF2L	;3
    510  f113				  -	      ldy.w	playfield+pfres*pfwidth-1
    511  f113				  -	      sty	PF1R	; possibly too early?
    512  f113				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    513  f113				  -	      sty	PF2R	;3
    514  f113					      else
    515  f113		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    516  f116		       84 0e		      sty	PF1L	;3
    517  f118		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    518  f11b		       84 0f		      sty	PF2L	;3
    519  f11d		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    520  f120		       84 0e		      sty	PF1R	; possibly too early?
    521  f122		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    522  f125		       84 0f		      sty	PF2R	;3
    523  f127					      endif
    524  f127
    525  f127				   enterlastkernel
    526  f127		       a5 92		      lda	ballheight
    527  f129
    528  f129							; tya
    529  f129		       c7 89		      dcp	bally
    530  f12b							; sleep 4
    531  f12b
    532  f12b							; sbc stack3
    533  f12b		       2a		      rol
    534  f12c		       2a		      rol
    535  f12d		       85 1f		      sta	ENABL
    536  f12f
    537  f12f		       a5 8f		      lda	player1height	;3
    538  f131		       c7 86		      dcp	player1y	;5
    539  f133		       90 d7		      bcc	.skipDrawlastP1
    540  f135		       a4 86		      ldy	player1y	;3
    541  f137		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
    542  f139							; so it doesn't cross a page boundary!
    543  f139
    544  f139				   .continuelastP1
    545  f139		       85 1c		      sta	GRP1	;3
    546  f13b
    547  f13b					      ifnconst	player1colors
    548  f13b		       a5 87		      lda	missile1height	;3
    549  f13d		       c7 88		      dcp	missile1y	;5
    550  f13f				  -	      else
    551  f13f				  -	      lda	(player1color),y
    552  f13f				  -	      sta	COLUP1
    553  f13f					      endif
    554  f13f
    555  f13f		       ca		      dex
    556  f140							;dec temp4 ; might try putting this above PF writes
    557  f140		       f0 36		      beq	endkernel
    558  f142
    559  f142
    560  f142				  -	      ifconst	pfres
    561  f142				  -	      ldy.w	playfield+pfres*pfwidth-4
    562  f142				  -	      sty	PF1L	;3
    563  f142				  -	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
    564  f142				  -	      sty	PF2L	;3
    565  f142				  -	      ldy.w	playfield+pfres*pfwidth-1
    566  f142				  -	      sty	PF1R	; possibly too early?
    567  f142				  -	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
    568  f142				  -	      sty	PF2R	;3
    569  f142					      else
    570  f142		       ac d0 00 	      ldy.w	playfield-48+pfwidth*12+44
    571  f145		       84 0e		      sty	PF1L	;3
    572  f147		       ac d1 00 	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
    573  f14a		       84 0f		      sty	PF2L	;3
    574  f14c		       ac d3 00 	      ldy.w	playfield-48+pfwidth*12+47
    575  f14f		       84 0e		      sty	PF1R	; possibly too early?
    576  f151		       ac d2 00 	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
    577  f154		       84 0f		      sty	PF2R	;3
    578  f156					      endif
    579  f156
    580  f156					      ifnconst	player1colors
    581  f156		       2a		      rol		;2
    582  f157		       2a		      rol		;2
    583  f158		       85 1e		      sta	ENAM1	;3
    584  f15a				  -	      else
    585  f15a				  -	      ifnconst	playercolors
    586  f15a				  -	      sleep	7
    587  f15a				  -	      else
    588  f15a				  -	      lda.w	player0colorstore
    589  f15a				  -	      sta	COLUP0
    590  f15a				  -	      endif
    591  f15a					      endif
    592  f15a
    593  f15a		       ad 8e 00 	      lda.w	player0height
    594  f15d		       c7 85		      dcp	player0y
    595  f15f		       90 11		      bcc	.skipDrawlastP0
    596  f161		       a4 85		      ldy	player0y
    597  f163		       b1 8a		      lda	(player0pointer),y
    598  f165				   .continuelastP0
    599  f165		       85 1b		      sta	GRP0
    600  f167
    601  f167
    602  f167
    603  f167					      ifnconst	no_blank_lines
    604  f167		       a5 90		      lda	missile0height	;3
    605  f169		       c7 91		      dcp	missile0y	;5
    606  f16b		       e5 f6		      sbc	stack1
    607  f16d		       85 1d		      sta	ENAM0	;3
    608  f16f		       4c 12 f1 	      jmp	.endkerloop
    609  f172				  -	      else
    610  f172				  -	      ifconst	readpaddle
    611  f172				  -	      ldy	currentpaddle
    612  f172				  -	      lda	INPT0,y
    613  f172				  -	      bpl	noreadpaddle2
    614  f172				  -	      inc	paddle
    615  f172				  -	      jmp	.endkerloop
    616  f172				  -noreadpaddle2
    617  f172				  -	      sleep	4
    618  f172				  -	      jmp	.endkerloop
    619  f172				  -	      else		; no_blank_lines and no paddle reading
    620  f172				  -	      pla
    621  f172				  -	      pha		; 14 cycles in 4 bytes
    622  f172				  -	      pla
    623  f172				  -	      pha
    624  f172				  -			; sleep 14
    625  f172				  -	      jmp	.endkerloop
    626  f172				  -	      endif
    627  f172					      endif
    628  f172
    629  f172
    630  f172							; ifconst donepaddleskip
    631  f172							;paddleskipread
    632  f172							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
    633  f172							; plus we get a lo-res paddle read
    634  f172							; bmi donepaddleskip
    635  f172							; endif
    636  f172
    637  f172				   .skipDrawlastP0
    638  f172		       a9 00		      lda	#0
    639  f174		       a8		      tay
    640  f175		       4c 65 f1 	      jmp	.continuelastP0
    641  f178
    642  f178				  -	      ifconst	no_blank_lines
    643  f178				  -no_blank_lines_bailout
    644  f178				  -	      ldx	#0
    645  f178					      endif
    646  f178
    647  f178				   endkernel
    648  f178							; 6 digit score routine
    649  f178		       86 0e		      stx	PF1
    650  f17a		       86 0f		      stx	PF2
    651  f17c		       86 0d		      stx	PF0
    652  f17e		       18		      clc
    653  f17f
    654  f17f				  -	      ifconst	pfrowheight
    655  f17f				  -	      lda	#pfrowheight+2
    656  f17f					      else
    657  f17f					      ifnconst	pfres
    658  f17f		       a9 0a		      lda	#10
    659  f181				  -	      else
    660  f181				  -	      lda	#(96/pfres)+2	; try to come close to the real size
    661  f181					      endif
    662  f181					      endif
    663  f181
    664  f181		       e5 ef		      sbc	playfieldpos
    665  f183		       85 ef		      sta	playfieldpos
    666  f185		       8a		      txa
    667  f186
    668  f186				  -	      ifconst	shakescreen
    669  f186				  -	      bit	shakescreen
    670  f186				  -	      bmi	noshakescreen2
    671  f186				  -	      ldx	#$3D
    672  f186				  -noshakescreen2
    673  f186					      endif
    674  f186
    675  f186		       95 02		      sta	WSYNC,x
    676  f188
    677  f188							; STA WSYNC ;first one, need one more
    678  f188		       85 0b		      sta	REFP0
    679  f18a		       85 0c		      sta	REFP1
    680  f18c		       85 1b		      STA	GRP0
    681  f18e		       85 1c		      STA	GRP1
    682  f190							; STA PF1
    683  f190							; STA PF2
    684  f190		       85 2b		      sta	HMCLR
    685  f192		       85 1d		      sta	ENAM0
    686  f194		       85 1e		      sta	ENAM1
    687  f196		       85 1f		      sta	ENABL
    688  f198
    689  f198		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
    690  f19a		       85 85		      sta	player0y
    691  f19c		       a5 9e		      lda	temp3
    692  f19e		       85 86		      sta	player1y
    693  f1a0					      ifnconst	player1colors
    694  f1a0		       a5 a1		      lda	temp6
    695  f1a2		       85 88		      sta	missile1y
    696  f1a4					      endif
    697  f1a4					      ifnconst	playercolors
    698  f1a4					      ifnconst	readpaddle
    699  f1a4		       a5 a0		      lda	temp5
    700  f1a6		       85 91		      sta	missile0y
    701  f1a8					      endif
    702  f1a8					      endif
    703  f1a8		       a5 f7		      lda	stack2
    704  f1aa		       85 89		      sta	bally
    705  f1ac
    706  f1ac							; REVENG - strangely, this isn't required any more. might have
    707  f1ac							; resulted from the no_blank_lines score bounce fix
    708  f1ac							;ifconst no_blank_lines
    709  f1ac							;sta WSYNC
    710  f1ac							;endif
    711  f1ac
    712  f1ac		       ad 84 02 	      lda	INTIM
    713  f1af		       18		      clc
    714  f1b0					      ifnconst	vblank_time
    715  f1b0		       69 8e		      adc	#43+12+87
    716  f1b2				  -	      else
    717  f1b2				  -	      adc	#vblank_time+12+87
    718  f1b2				  -
    719  f1b2					      endif
    720  f1b2							; sta WSYNC
    721  f1b2		       8d 96 02 	      sta	TIM64T
    722  f1b5
    723  f1b5				  -	      ifconst	minikernel
    724  f1b5				  -	      jsr	minikernel
    725  f1b5					      endif
    726  f1b5
    727  f1b5							; now reassign temp vars for score pointers
    728  f1b5
    729  f1b5							; score pointers contain:
    730  f1b5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
    731  f1b5							; swap lo2->temp1
    732  f1b5							; swap lo4->temp3
    733  f1b5							; swap lo6->temp5
    734  f1b5					      ifnconst	noscore
    735  f1b5		       a5 97		      lda	scorepointers+1
    736  f1b7							; ldy temp1
    737  f1b7		       85 9c		      sta	temp1
    738  f1b9							; sty scorepointers+1
    739  f1b9
    740  f1b9		       a5 99		      lda	scorepointers+3
    741  f1bb							; ldy temp3
    742  f1bb		       85 9e		      sta	temp3
    743  f1bd							; sty scorepointers+3
    744  f1bd
    745  f1bd
    746  f1bd		       85 2b		      sta	HMCLR
    747  f1bf		       ba		      tsx
    748  f1c0		       86 f6		      stx	stack1
    749  f1c2		       a2 e0		      ldx	#$E0
    750  f1c4		       86 20		      stx	HMP0
    751  f1c6
    752  f1c6		       a5 a3		      LDA	scorecolor
    753  f1c8		       85 06		      STA	COLUP0
    754  f1ca		       85 07		      STA	COLUP1
    755  f1cc				  -	      ifconst	scorefade
    756  f1cc				  -	      STA	stack2
    757  f1cc					      endif
    758  f1cc				  -	      ifconst	pfscore
    759  f1cc				  -	      lda	pfscorecolor
    760  f1cc				  -	      sta	COLUPF
    761  f1cc					      endif
    762  f1cc		       85 02		      sta	WSYNC
    763  f1ce		       a2 00		      ldx	#0
    764  f1d0		       86 1b		      STx	GRP0
    765  f1d2		       86 1c		      STx	GRP1	; seems to be needed because of vdel
    766  f1d4
    767  f1d4		       a5 9b		      lda	scorepointers+5
    768  f1d6							; ldy temp5
    769  f1d6		       95 a0		      sta	temp5,x
    770  f1d8							; sty scorepointers+5
    771  f1d8		       a9 ff		      lda	#>scoretable
    772  f1da		       85 97		      sta	scorepointers+1
    773  f1dc		       85 99		      sta	scorepointers+3
    774  f1de		       85 9b		      sta	scorepointers+5
    775  f1e0		       85 9d		      sta	temp2
    776  f1e2		       85 9f		      sta	temp4
    777  f1e4		       85 a1		      sta	temp6
    778  f1e6		       a0 07		      LDY	#7
    779  f1e8		       84 25		      STY	VDELP0
    780  f1ea		       85 10		      STA	RESP0
    781  f1ec		       85 11		      STA	RESP1
    782  f1ee
    783  f1ee
    784  f1ee		       a9 03		      LDA	#$03
    785  f1f0		       85 04		      STA	NUSIZ0
    786  f1f2		       85 05		      STA	NUSIZ1
    787  f1f4		       85 26		      STA	VDELP1
    788  f1f6		       a9 f0		      LDA	#$F0
    789  f1f8		       85 21		      STA	HMP1
    790  f1fa		       b1 96		      lda	(scorepointers),y
    791  f1fc		       85 1b		      sta	GRP0
    792  f1fe		       85 2a		      STA	HMOVE	; cycle 73 ?
    793  f200		       4c 0b f2 	      jmp	beginscore
    794  f203
    795  f203
    796  f203				  -	      if	((<*)>$d4)
    797  f203				  -	      align	256	; kludge that potentially wastes space! should be fixed!
    798  f203					      endif
    799  f203
    800  f203				   loop2
    801  f203		       b1 96		      lda	(scorepointers),y	;+5 68 204
    802  f205		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
    803  f207				  -	      ifconst	pfscore
    804  f207				  -	      lda.w	pfscore1
    805  f207				  -	      sta	PF1
    806  f207					      else
    807  f207				  -	      ifconst	scorefade
    808  f207				  -	      sleep	2
    809  f207				  -	      dec	stack2	; decrement the temporary scorecolor
    810  f207					      else
      0  f207					      sleep	7
      1  f207				   .CYCLES    SET	7
      2  f207
      3  f207				  -	      IF	.CYCLES < 2
      4  f207				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f207				  -	      ERR
      6  f207					      ENDIF
      7  f207
      8  f207					      IF	.CYCLES & 1
      9  f207					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f207		       04 00		      nop	0
     11  f209				  -	      ELSE
     12  f209				  -	      bit	VSYNC
     13  f209					      ENDIF
     14  f209				   .CYCLES    SET	.CYCLES - 3
     15  f209					      ENDIF
     16  f209
     17  f209					      REPEAT	.CYCLES / 2
     18  f209		       ea		      nop
     17  f209					      REPEND
     18  f20a		       ea		      nop
     19  f20b					      REPEND
    812  f20b					      endif
    813  f20b					      endif
    814  f20b							; cycle 0
    815  f20b				   beginscore
    816  f20b		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
    817  f20d		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
    818  f20f		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
    819  f211		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
    820  f213		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
    821  f215		       9a		      txs
    822  f216		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
    823  f218				  -	      ifconst	scorefade
    824  f218				  -	      lda	stack2
    825  f218					      else
      0  f218					      sleep	3
      1  f218				   .CYCLES    SET	3
      2  f218
      3  f218				  -	      IF	.CYCLES < 2
      4  f218				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f218				  -	      ERR
      6  f218					      ENDIF
      7  f218
      8  f218					      IF	.CYCLES & 1
      9  f218					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f218		       04 00		      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a					      ENDIF
     14  f21a				   .CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a				  -	      REPEAT	.CYCLES / 2
     18  f21a				  -	      nop
     19  f21a					      REPEND
    827  f21a					      endif
    828  f21a
    829  f21a				  -	      ifconst	pfscore
    830  f21a				  -	      lda	pfscore2
    831  f21a				  -	      sta	PF1
    832  f21a					      else
    833  f21a				  -	      ifconst	scorefade
    834  f21a				  -	      sta	COLUP0
    835  f21a				  -	      sta	COLUP1
    836  f21a					      else
      0  f21a					      sleep	6
      1  f21a				   .CYCLES    SET	6
      2  f21a
      3  f21a				  -	      IF	.CYCLES < 2
      4  f21a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f21a				  -	      ERR
      6  f21a					      ENDIF
      7  f21a
      8  f21a				  -	      IF	.CYCLES & 1
      9  f21a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  f21a				  -	      nop	0
     11  f21a				  -	      ELSE
     12  f21a				  -	      bit	VSYNC
     13  f21a				  -	      ENDIF
     14  f21a				  -.CYCLES    SET	.CYCLES - 3
     15  f21a					      ENDIF
     16  f21a
     17  f21a					      REPEAT	.CYCLES / 2
     18  f21a		       ea		      nop
     17  f21a					      REPEND
     18  f21b		       ea		      nop
     17  f21b					      REPEND
     18  f21c		       ea		      nop
     19  f21d					      REPEND
    838  f21d					      endif
    839  f21d					      endif
    840  f21d
    841  f21d		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
    842  f21f		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
    843  f221		       ba		      tsx
    844  f222		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
    845  f224		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
    846  f226		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
    847  f228		       88		      dey
    848  f229		       10 d8		      bpl	loop2	;+2 60 180
    849  f22b
    850  f22b		       a6 f6		      ldx	stack1
    851  f22d		       9a		      txs
    852  f22e							; lda scorepointers+1
    853  f22e		       a4 9c		      ldy	temp1
    854  f230							; sta temp1
    855  f230		       84 97		      sty	scorepointers+1
    856  f232
    857  f232		       a9 00		      LDA	#0
    858  f234		       85 0e		      sta	PF1
    859  f236		       85 1b		      STA	GRP0
    860  f238		       85 1c		      STA	GRP1
    861  f23a		       85 25		      STA	VDELP0
    862  f23c		       85 26		      STA	VDELP1	;do we need these
    863  f23e		       85 04		      STA	NUSIZ0
    864  f240		       85 05		      STA	NUSIZ1
    865  f242
    866  f242							; lda scorepointers+3
    867  f242		       a4 9e		      ldy	temp3
    868  f244							; sta temp3
    869  f244		       84 99		      sty	scorepointers+3
    870  f246
    871  f246							; lda scorepointers+5
    872  f246		       a4 a0		      ldy	temp5
    873  f248							; sta temp5
    874  f248		       84 9b		      sty	scorepointers+5
    875  f24a					      endif		;noscore
    876  f24a		       a9 c2		      LDA	#%11000010
    877  f24c		       85 02		      sta	WSYNC
    878  f24e		       85 01		      STA	VBLANK
      0  f250					      RETURN
      1  f250					      ifnconst	bankswitch
      2  f250		       60		      rts
      3  f251				  -	      else
      4  f251				  -	      jmp	BS_return
      5  f251					      endif
    880  f251
    881  f251				  -	      ifconst	shakescreen
    882  f251				  -doshakescreen
    883  f251				  -	      bit	shakescreen
    884  f251				  -	      bmi	noshakescreen
    885  f251				  -	      sta	WSYNC
    886  f251				  -noshakescreen
    887  f251				  -	      ldx	missile0height
    888  f251				  -	      inx
    889  f251				  -	      rts
    890  f251					      endif
    891  f251
    892  f251							; playfield drawing routines
    893  f251							; you get a 32x12 bitmapped display in a single color :)
    894  f251							; 0-31 and 0-11
    895  f251
    896  f251				   pfclear		; clears playfield - or fill with pattern
    897  f251				  -	      ifconst	pfres
    898  f251				  -	      ldx	#pfres*pfwidth-1
    899  f251					      else
    900  f251		       a2 2f		      ldx	#47-(4-pfwidth)*12	; will this work?
    901  f253					      endif
    902  f253				   pfclear_loop
    903  f253					      ifnconst	superchip
    904  f253		       95 a4		      sta	playfield,x
    905  f255				  -	      else
    906  f255				  -	      sta	playfield-128,x
    907  f255					      endif
    908  f255		       ca		      dex
    909  f256		       10 fb		      bpl	pfclear_loop
      0  f258					      RETURN
      1  f258					      ifnconst	bankswitch
      2  f258		       60		      rts
      3  f259				  -	      else
      4  f259				  -	      jmp	BS_return
      5  f259					      endif
    911  f259
    912  f259				   setuppointers
    913  f259		       86 9d		      stx	temp2	; store on.off.flip value
    914  f25b		       aa		      tax		; put x-value in x
    915  f25c		       4a		      lsr
    916  f25d		       4a		      lsr
    917  f25e		       4a		      lsr		; divide x pos by 8
    918  f25f		       85 9c		      sta	temp1
    919  f261		       98		      tya
    920  f262		       0a		      asl
    921  f263					      if	pfwidth=4
    922  f263		       0a		      asl		; multiply y pos by 4
    923  f264					      endif		; else multiply by 2
    924  f264		       18		      clc
    925  f265		       65 9c		      adc	temp1	; add them together to get actual memory location offset
    926  f267		       a8		      tay		; put the value in y
    927  f268		       a5 9d		      lda	temp2	; restore on.off.flip value
    928  f26a		       60		      rts
    929  f26b
    930  f26b				   pfread
    931  f26b							;x=xvalue, y=yvalue
    932  f26b		       20 59 f2 	      jsr	setuppointers
    933  f26e		       bd d3 f2 	      lda	setbyte,x
    934  f271		       39 a4 00 	      and	playfield,y
    935  f274		       5d d3 f2 	      eor	setbyte,x
    936  f277							; beq readzero
    937  f277							; lda #1
    938  f277							; readzero
      0  f277					      RETURN
      1  f277					      ifnconst	bankswitch
      2  f277		       60		      rts
      3  f278				  -	      else
      4  f278				  -	      jmp	BS_return
      5  f278					      endif
    940  f278
    941  f278				   pfpixel
    942  f278							;x=xvalue, y=yvalue, a=0,1,2
    943  f278		       20 59 f2 	      jsr	setuppointers
    944  f27b
    945  f27b				  -	      ifconst	bankswitch
    946  f27b				  -	      lda	temp2	; load on.off.flip value (0,1, or 2)
    947  f27b				  -	      beq	pixelon_r	; if "on" go to on
    948  f27b				  -	      lsr
    949  f27b				  -	      bcs	pixeloff_r	; value is 1 if true
    950  f27b				  -	      lda	playfield,y	; if here, it's "flip"
    951  f27b				  -	      eor	setbyte,x
    952  f27b				  -	      ifconst	superchip
    953  f27b				  -	      sta	playfield-128,y
    954  f27b				  -	      else
    955  f27b				  -	      sta	playfield,y
    956  f27b				  -	      endif
    957  f27b				  -	      RETURN
    958  f27b				  -pixelon_r
    959  f27b				  -	      lda	playfield,y
    960  f27b				  -	      ora	setbyte,x
    961  f27b				  -	      ifconst	superchip
    962  f27b				  -	      sta	playfield-128,y
    963  f27b				  -	      else
    964  f27b				  -	      sta	playfield,y
    965  f27b				  -	      endif
    966  f27b				  -	      RETURN
    967  f27b				  -pixeloff_r
    968  f27b				  -	      lda	setbyte,x
    969  f27b				  -	      eor	#$ff
    970  f27b				  -	      and	playfield,y
    971  f27b				  -	      ifconst	superchip
    972  f27b				  -	      sta	playfield-128,y
    973  f27b				  -	      else
    974  f27b				  -	      sta	playfield,y
    975  f27b				  -	      endif
    976  f27b				  -	      RETURN
    977  f27b				  -
    978  f27b					      else
    979  f27b		       4c ac f2 	      jmp	plotpoint
    980  f27e					      endif
    981  f27e
    982  f27e				   pfhline
    983  f27e							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
    984  f27e		       20 59 f2 	      jsr	setuppointers
    985  f281		       4c 8b f2 	      jmp	noinc
    986  f284				   keepgoing
    987  f284		       e8		      inx
    988  f285		       8a		      txa
    989  f286		       29 07		      and	#7
    990  f288		       d0 01		      bne	noinc
    991  f28a		       c8		      iny
    992  f28b				   noinc
    993  f28b		       20 ac f2 	      jsr	plotpoint
    994  f28e		       e4 9e		      cpx	temp3
    995  f290		       30 f2		      bmi	keepgoing
      0  f292					      RETURN
      1  f292					      ifnconst	bankswitch
      2  f292		       60		      rts
      3  f293				  -	      else
      4  f293				  -	      jmp	BS_return
      5  f293					      endif
    997  f293
    998  f293				   pfvline
    999  f293							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   1000  f293		       20 59 f2 	      jsr	setuppointers
   1001  f296		       84 9c		      sty	temp1	; store memory location offset
   1002  f298		       e6 9e		      inc	temp3	; increase final x by 1
   1003  f29a		       a5 9e		      lda	temp3
   1004  f29c		       0a		      asl
   1005  f29d					      if	pfwidth=4
   1006  f29d		       0a		      asl		; multiply by 4
   1007  f29e					      endif		; else multiply by 2
   1008  f29e		       85 9e		      sta	temp3	; store it
   1009  f2a0							; Thanks to Michael Rideout for fixing a bug in this code
   1010  f2a0							; right now, temp1=y=starting memory location, temp3=final
   1011  f2a0							; x should equal original x value
   1012  f2a0				   keepgoingy
   1013  f2a0		       20 ac f2 	      jsr	plotpoint
   1014  f2a3		       c8		      iny
   1015  f2a4		       c8		      iny
   1016  f2a5					      if	pfwidth=4
   1017  f2a5		       c8		      iny
   1018  f2a6		       c8		      iny
   1019  f2a7					      endif
   1020  f2a7		       c4 9e		      cpy	temp3
   1021  f2a9		       30 f5		      bmi	keepgoingy
      0  f2ab					      RETURN
      1  f2ab					      ifnconst	bankswitch
      2  f2ab		       60		      rts
      3  f2ac				  -	      else
      4  f2ac				  -	      jmp	BS_return
      5  f2ac					      endif
   1023  f2ac
   1024  f2ac				   plotpoint
   1025  f2ac		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   1026  f2ae		       f0 0d		      beq	pixelon	; if "on" go to on
   1027  f2b0		       4a		      lsr
   1028  f2b1		       b0 14		      bcs	pixeloff	; value is 1 if true
   1029  f2b3		       b9 a4 00 	      lda	playfield,y	; if here, it's "flip"
   1030  f2b6		       5d d3 f2 	      eor	setbyte,x
   1031  f2b9				  -	      ifconst	superchip
   1032  f2b9				  -	      sta	playfield-128,y
   1033  f2b9					      else
   1034  f2b9		       99 a4 00 	      sta	playfield,y
   1035  f2bc					      endif
   1036  f2bc		       60		      rts
   1037  f2bd				   pixelon
   1038  f2bd		       b9 a4 00 	      lda	playfield,y
   1039  f2c0		       1d d3 f2 	      ora	setbyte,x
   1040  f2c3				  -	      ifconst	superchip
   1041  f2c3				  -	      sta	playfield-128,y
   1042  f2c3					      else
   1043  f2c3		       99 a4 00 	      sta	playfield,y
   1044  f2c6					      endif
   1045  f2c6		       60		      rts
   1046  f2c7				   pixeloff
   1047  f2c7		       bd d3 f2 	      lda	setbyte,x
   1048  f2ca		       49 ff		      eor	#$ff
   1049  f2cc		       39 a4 00 	      and	playfield,y
   1050  f2cf				  -	      ifconst	superchip
   1051  f2cf				  -	      sta	playfield-128,y
   1052  f2cf					      else
   1053  f2cf		       99 a4 00 	      sta	playfield,y
   1054  f2d2					      endif
   1055  f2d2		       60		      rts
   1056  f2d3
   1057  f2d3				   setbyte
   1058  f2d3					      ifnconst	pfcenter
   1059  f2d3		       80		      .byte.b	$80
   1060  f2d4		       40		      .byte.b	$40
   1061  f2d5		       20		      .byte.b	$20
   1062  f2d6		       10		      .byte.b	$10
   1063  f2d7		       08		      .byte.b	$08
   1064  f2d8		       04		      .byte.b	$04
   1065  f2d9		       02		      .byte.b	$02
   1066  f2da		       01		      .byte.b	$01
   1067  f2db					      endif
   1068  f2db		       01		      .byte.b	$01
   1069  f2dc		       02		      .byte.b	$02
   1070  f2dd		       04		      .byte.b	$04
   1071  f2de		       08		      .byte.b	$08
   1072  f2df		       10		      .byte.b	$10
   1073  f2e0		       20		      .byte.b	$20
   1074  f2e1		       40		      .byte.b	$40
   1075  f2e2		       80		      .byte.b	$80
   1076  f2e3		       80		      .byte.b	$80
   1077  f2e4		       40		      .byte.b	$40
   1078  f2e5		       20		      .byte.b	$20
   1079  f2e6		       10		      .byte.b	$10
   1080  f2e7		       08		      .byte.b	$08
   1081  f2e8		       04		      .byte.b	$04
   1082  f2e9		       02		      .byte.b	$02
   1083  f2ea		       01		      .byte.b	$01
   1084  f2eb		       01		      .byte.b	$01
   1085  f2ec		       02		      .byte.b	$02
   1086  f2ed		       04		      .byte.b	$04
   1087  f2ee		       08		      .byte.b	$08
   1088  f2ef		       10		      .byte.b	$10
   1089  f2f0		       20		      .byte.b	$20
   1090  f2f1		       40		      .byte.b	$40
   1091  f2f2		       80		      .byte.b	$80
   1092  f2f3				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   1093  f2f3		       d0 13		      bne	notleft
   1094  f2f5							;left
   1095  f2f5				  -	      ifconst	pfres
   1096  f2f5				  -	      ldx	#pfres*4
   1097  f2f5					      else
   1098  f2f5		       a2 30		      ldx	#48
   1099  f2f7					      endif
   1100  f2f7				   leftloop
   1101  f2f7		       b5 a3		      lda	playfield-1,x
   1102  f2f9		       4a		      lsr
   1103  f2fa
   1104  f2fa				  -	      ifconst	superchip
   1105  f2fa				  -	      lda	playfield-2,x
   1106  f2fa				  -	      rol
   1107  f2fa				  -	      sta	playfield-130,x
   1108  f2fa				  -	      lda	playfield-3,x
   1109  f2fa				  -	      ror
   1110  f2fa				  -	      sta	playfield-131,x
   1111  f2fa				  -	      lda	playfield-4,x
   1112  f2fa				  -	      rol
   1113  f2fa				  -	      sta	playfield-132,x
   1114  f2fa				  -	      lda	playfield-1,x
   1115  f2fa				  -	      ror
   1116  f2fa				  -	      sta	playfield-129,x
   1117  f2fa					      else
   1118  f2fa		       36 a2		      rol	playfield-2,x
   1119  f2fc		       76 a1		      ror	playfield-3,x
   1120  f2fe		       36 a0		      rol	playfield-4,x
   1121  f300		       76 a3		      ror	playfield-1,x
   1122  f302					      endif
   1123  f302
   1124  f302		       8a		      txa
   1125  f303		       cb 04		      sbx	#4
   1126  f305		       d0 f0		      bne	leftloop
      0  f307					      RETURN
      1  f307					      ifnconst	bankswitch
      2  f307		       60		      rts
      3  f308				  -	      else
      4  f308				  -	      jmp	BS_return
      5  f308					      endif
   1128  f308
   1129  f308				   notleft
   1130  f308		       4a		      lsr
   1131  f309		       90 13		      bcc	notright
   1132  f30b							;right
   1133  f30b
   1134  f30b				  -	      ifconst	pfres
   1135  f30b				  -	      ldx	#pfres*4
   1136  f30b					      else
   1137  f30b		       a2 30		      ldx	#48
   1138  f30d					      endif
   1139  f30d				   rightloop
   1140  f30d		       b5 a0		      lda	playfield-4,x
   1141  f30f		       4a		      lsr
   1142  f310				  -	      ifconst	superchip
   1143  f310				  -	      lda	playfield-3,x
   1144  f310				  -	      rol
   1145  f310				  -	      sta	playfield-131,x
   1146  f310				  -	      lda	playfield-2,x
   1147  f310				  -	      ror
   1148  f310				  -	      sta	playfield-130,x
   1149  f310				  -	      lda	playfield-1,x
   1150  f310				  -	      rol
   1151  f310				  -	      sta	playfield-129,x
   1152  f310				  -	      lda	playfield-4,x
   1153  f310				  -	      ror
   1154  f310				  -	      sta	playfield-132,x
   1155  f310					      else
   1156  f310		       36 a1		      rol	playfield-3,x
   1157  f312		       76 a2		      ror	playfield-2,x
   1158  f314		       36 a3		      rol	playfield-1,x
   1159  f316		       76 a0		      ror	playfield-4,x
   1160  f318					      endif
   1161  f318		       8a		      txa
   1162  f319		       cb 04		      sbx	#4
   1163  f31b		       d0 f0		      bne	rightloop
      0  f31d					      RETURN
      1  f31d					      ifnconst	bankswitch
      2  f31d		       60		      rts
      3  f31e				  -	      else
      4  f31e				  -	      jmp	BS_return
      5  f31e					      endif
   1165  f31e
   1166  f31e				   notright
   1167  f31e		       4a		      lsr
   1168  f31f		       90 49		      bcc	notup
   1169  f321							;up
   1170  f321		       4a		      lsr
   1171  f322		       90 02		      bcc	onedecup
   1172  f324		       c6 ef		      dec	playfieldpos
   1173  f326				   onedecup
   1174  f326		       c6 ef		      dec	playfieldpos
   1175  f328		       f0 02		      beq	shiftdown
   1176  f32a		       10 3d		      bpl	noshiftdown2
   1177  f32c				   shiftdown
   1178  f32c				  -	      ifconst	pfrowheight
   1179  f32c				  -	      lda	#pfrowheight
   1180  f32c					      else
   1181  f32c					      ifnconst	pfres
   1182  f32c		       a9 08		      lda	#8
   1183  f32e				  -	      else
   1184  f32e				  -	      lda	#(96/pfres)	; try to come close to the real size
   1185  f32e					      endif
   1186  f32e					      endif
   1187  f32e
   1188  f32e		       85 ef		      sta	playfieldpos
   1189  f330		       a5 a7		      lda	playfield+3
   1190  f332		       85 9f		      sta	temp4
   1191  f334		       a5 a6		      lda	playfield+2
   1192  f336		       85 9e		      sta	temp3
   1193  f338		       a5 a5		      lda	playfield+1
   1194  f33a		       85 9d		      sta	temp2
   1195  f33c		       a5 a4		      lda	playfield
   1196  f33e		       85 9c		      sta	temp1
   1197  f340		       a2 00		      ldx	#0
   1198  f342				   up2
   1199  f342		       b5 a8		      lda	playfield+4,x
   1200  f344				  -	      ifconst	superchip
   1201  f344				  -	      sta	playfield-128,x
   1202  f344				  -	      lda	playfield+5,x
   1203  f344				  -	      sta	playfield-127,x
   1204  f344				  -	      lda	playfield+6,x
   1205  f344				  -	      sta	playfield-126,x
   1206  f344				  -	      lda	playfield+7,x
   1207  f344				  -	      sta	playfield-125,x
   1208  f344					      else
   1209  f344		       95 a4		      sta	playfield,x
   1210  f346		       b5 a9		      lda	playfield+5,x
   1211  f348		       95 a5		      sta	playfield+1,x
   1212  f34a		       b5 aa		      lda	playfield+6,x
   1213  f34c		       95 a6		      sta	playfield+2,x
   1214  f34e		       b5 ab		      lda	playfield+7,x
   1215  f350		       95 a7		      sta	playfield+3,x
   1216  f352					      endif
   1217  f352		       8a		      txa
   1218  f353		       cb fc		      sbx	#252
   1219  f355				  -	      ifconst	pfres
   1220  f355				  -	      cpx	#(pfres-1)*4
   1221  f355					      else
   1222  f355		       e0 2c		      cpx	#44
   1223  f357					      endif
   1224  f357		       d0 e9		      bne	up2
   1225  f359
   1226  f359		       a5 9f		      lda	temp4
   1227  f35b
   1228  f35b				  -	      ifconst	superchip
   1229  f35b				  -	      ifconst	pfres
   1230  f35b				  -	      sta	playfield+pfres*4-129
   1231  f35b				  -	      lda	temp3
   1232  f35b				  -	      sta	playfield+pfres*4-130
   1233  f35b				  -	      lda	temp2
   1234  f35b				  -	      sta	playfield+pfres*4-131
   1235  f35b				  -	      lda	temp1
   1236  f35b				  -	      sta	playfield+pfres*4-132
   1237  f35b				  -	      else
   1238  f35b				  -	      sta	playfield+47-128
   1239  f35b				  -	      lda	temp3
   1240  f35b				  -	      sta	playfield+46-128
   1241  f35b				  -	      lda	temp2
   1242  f35b				  -	      sta	playfield+45-128
   1243  f35b				  -	      lda	temp1
   1244  f35b				  -	      sta	playfield+44-128
   1245  f35b				  -	      endif
   1246  f35b					      else
   1247  f35b				  -	      ifconst	pfres
   1248  f35b				  -	      sta	playfield+pfres*4-1
   1249  f35b				  -	      lda	temp3
   1250  f35b				  -	      sta	playfield+pfres*4-2
   1251  f35b				  -	      lda	temp2
   1252  f35b				  -	      sta	playfield+pfres*4-3
   1253  f35b				  -	      lda	temp1
   1254  f35b				  -	      sta	playfield+pfres*4-4
   1255  f35b					      else
   1256  f35b		       85 d3		      sta	playfield+47
   1257  f35d		       a5 9e		      lda	temp3
   1258  f35f		       85 d2		      sta	playfield+46
   1259  f361		       a5 9d		      lda	temp2
   1260  f363		       85 d1		      sta	playfield+45
   1261  f365		       a5 9c		      lda	temp1
   1262  f367		       85 d0		      sta	playfield+44
   1263  f369					      endif
   1264  f369					      endif
   1265  f369				   noshiftdown2
      0  f369					      RETURN
      1  f369					      ifnconst	bankswitch
      2  f369		       60		      rts
      3  f36a				  -	      else
      4  f36a				  -	      jmp	BS_return
      5  f36a					      endif
   1267  f36a
   1268  f36a
   1269  f36a				   notup
   1270  f36a							;down
   1271  f36a		       4a		      lsr
   1272  f36b		       b0 02		      bcs	oneincup
   1273  f36d		       e6 ef		      inc	playfieldpos
   1274  f36f				   oneincup
   1275  f36f		       e6 ef		      inc	playfieldpos
   1276  f371		       a5 ef		      lda	playfieldpos
   1277  f373
   1278  f373				  -	      ifconst	pfrowheight
   1279  f373				  -	      cmp	#pfrowheight+1
   1280  f373					      else
   1281  f373					      ifnconst	pfres
   1282  f373		       c9 09		      cmp	#9
   1283  f375				  -	      else
   1284  f375				  -	      cmp	#(96/pfres)+1	; try to come close to the real size
   1285  f375					      endif
   1286  f375					      endif
   1287  f375
   1288  f375		       90 3b		      bcc	noshiftdown
   1289  f377		       a9 01		      lda	#1
   1290  f379		       85 ef		      sta	playfieldpos
   1291  f37b
   1292  f37b				  -	      ifconst	pfres
   1293  f37b				  -	      lda	playfield+pfres*4-1
   1294  f37b				  -	      sta	temp4
   1295  f37b				  -	      lda	playfield+pfres*4-2
   1296  f37b				  -	      sta	temp3
   1297  f37b				  -	      lda	playfield+pfres*4-3
   1298  f37b				  -	      sta	temp2
   1299  f37b				  -	      lda	playfield+pfres*4-4
   1300  f37b					      else
   1301  f37b		       a5 d3		      lda	playfield+47
   1302  f37d		       85 9f		      sta	temp4
   1303  f37f		       a5 d2		      lda	playfield+46
   1304  f381		       85 9e		      sta	temp3
   1305  f383		       a5 d1		      lda	playfield+45
   1306  f385		       85 9d		      sta	temp2
   1307  f387		       a5 d0		      lda	playfield+44
   1308  f389					      endif
   1309  f389
   1310  f389		       85 9c		      sta	temp1
   1311  f38b
   1312  f38b				  -	      ifconst	pfres
   1313  f38b				  -	      ldx	#(pfres-1)*4
   1314  f38b					      else
   1315  f38b		       a2 2c		      ldx	#44
   1316  f38d					      endif
   1317  f38d				   down2
   1318  f38d		       b5 a3		      lda	playfield-1,x
   1319  f38f				  -	      ifconst	superchip
   1320  f38f				  -	      sta	playfield-125,x
   1321  f38f				  -	      lda	playfield-2,x
   1322  f38f				  -	      sta	playfield-126,x
   1323  f38f				  -	      lda	playfield-3,x
   1324  f38f				  -	      sta	playfield-127,x
   1325  f38f				  -	      lda	playfield-4,x
   1326  f38f				  -	      sta	playfield-128,x
   1327  f38f					      else
   1328  f38f		       95 a7		      sta	playfield+3,x
   1329  f391		       b5 a2		      lda	playfield-2,x
   1330  f393		       95 a6		      sta	playfield+2,x
   1331  f395		       b5 a1		      lda	playfield-3,x
   1332  f397		       95 a5		      sta	playfield+1,x
   1333  f399		       b5 a0		      lda	playfield-4,x
   1334  f39b		       95 a4		      sta	playfield,x
   1335  f39d					      endif
   1336  f39d		       8a		      txa
   1337  f39e		       cb 04		      sbx	#4
   1338  f3a0		       d0 eb		      bne	down2
   1339  f3a2
   1340  f3a2		       a5 9f		      lda	temp4
   1341  f3a4				  -	      ifconst	superchip
   1342  f3a4				  -	      sta	playfield-125
   1343  f3a4				  -	      lda	temp3
   1344  f3a4				  -	      sta	playfield-126
   1345  f3a4				  -	      lda	temp2
   1346  f3a4				  -	      sta	playfield-127
   1347  f3a4				  -	      lda	temp1
   1348  f3a4				  -	      sta	playfield-128
   1349  f3a4					      else
   1350  f3a4		       85 a7		      sta	playfield+3
   1351  f3a6		       a5 9e		      lda	temp3
   1352  f3a8		       85 a6		      sta	playfield+2
   1353  f3aa		       a5 9d		      lda	temp2
   1354  f3ac		       85 a5		      sta	playfield+1
   1355  f3ae		       a5 9c		      lda	temp1
   1356  f3b0		       85 a4		      sta	playfield
   1357  f3b2					      endif
   1358  f3b2				   noshiftdown
      0  f3b2					      RETURN
      1  f3b2					      ifnconst	bankswitch
      2  f3b2		       60		      rts
      3  f3b3				  -	      else
      4  f3b3				  -	      jmp	BS_return
      5  f3b3					      endif
   1360  f3b3							;standard routines needed for pretty much all games
   1361  f3b3							; just the random number generator is left - maybe we should remove this asm file altogether?
   1362  f3b3							; repositioning code and score pointer setup moved to overscan
   1363  f3b3							; read switches, joysticks now compiler generated (more efficient)
   1364  f3b3
   1365  f3b3				   randomize
   1366  f3b3		       a5 a2		      lda	rand
   1367  f3b5		       4a		      lsr
   1368  f3b6				  -	      ifconst	rand16
   1369  f3b6				  -	      rol	rand16
   1370  f3b6					      endif
   1371  f3b6		       90 02		      bcc	noeor
   1372  f3b8		       49 b4		      eor	#$B4
   1373  f3ba				   noeor
   1374  f3ba		       85 a2		      sta	rand
   1375  f3bc				  -	      ifconst	rand16
   1376  f3bc				  -	      eor	rand16
   1377  f3bc					      endif
      0  f3bc					      RETURN
      1  f3bc					      ifnconst	bankswitch
      2  f3bc		       60		      rts
      3  f3bd				  -	      else
      4  f3bd				  -	      jmp	BS_return
      5  f3bd					      endif
   1379  f3bd				   drawscreen
   1380  f3bd				  -	      ifconst	debugscore
   1381  f3bd				  -	      ldx	#14
   1382  f3bd				  -	      lda	INTIM	; display # cycles left in the score
   1383  f3bd				  -
   1384  f3bd				  -	      ifconst	mincycles
   1385  f3bd				  -	      lda	mincycles
   1386  f3bd				  -	      cmp	INTIM
   1387  f3bd				  -	      lda	mincycles
   1388  f3bd				  -	      bcc	nochange
   1389  f3bd				  -	      lda	INTIM
   1390  f3bd				  -	      sta	mincycles
   1391  f3bd				  -nochange
   1392  f3bd				  -	      endif
   1393  f3bd				  -
   1394  f3bd				  -			; cmp #$2B
   1395  f3bd				  -			; bcs no_cycles_left
   1396  f3bd				  -	      bmi	cycles_left
   1397  f3bd				  -	      ldx	#64
   1398  f3bd				  -	      eor	#$ff	;make negative
   1399  f3bd				  -cycles_left
   1400  f3bd				  -	      stx	scorecolor
   1401  f3bd				  -	      and	#$7f	; clear sign bit
   1402  f3bd				  -	      tax
   1403  f3bd				  -	      lda	scorebcd,x
   1404  f3bd				  -	      sta	score+2
   1405  f3bd				  -	      lda	scorebcd1,x
   1406  f3bd				  -	      sta	score+1
   1407  f3bd				  -	      jmp	done_debugscore
   1408  f3bd				  -scorebcd
   1409  f3bd				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   1410  f3bd				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   1411  f3bd				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   1412  f3bd				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   1413  f3bd				  -scorebcd1
   1414  f3bd				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   1415  f3bd				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   1416  f3bd				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   1417  f3bd				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   1418  f3bd				  -done_debugscore
   1419  f3bd					      endif
   1420  f3bd
   1421  f3bd				  -	      ifconst	debugcycles
   1422  f3bd				  -	      lda	INTIM	; if we go over, it mucks up the background color
   1423  f3bd				  -			; cmp #$2B
   1424  f3bd				  -			; BCC overscan
   1425  f3bd				  -	      bmi	overscan
   1426  f3bd				  -	      sta	COLUBK
   1427  f3bd				  -	      bcs	doneoverscan
   1428  f3bd					      endif
   1429  f3bd
   1430  f3bd				   overscan
   1431  f3bd				  -	      ifconst	interlaced
   1432  f3bd				  -	      PHP
   1433  f3bd				  -	      PLA
   1434  f3bd				  -	      EOR	#4	; flip interrupt bit
   1435  f3bd				  -	      PHA
   1436  f3bd				  -	      PLP
   1437  f3bd				  -	      AND	#4	; isolate the interrupt bit
   1438  f3bd				  -	      TAX		; save it for later
   1439  f3bd					      endif
   1440  f3bd
   1441  f3bd				   overscanloop
   1442  f3bd		       ad 84 02 	      lda	INTIM	;wait for sync
   1443  f3c0		       30 fb		      bmi	overscanloop
   1444  f3c2				   doneoverscan
   1445  f3c2
   1446  f3c2							;do VSYNC
   1447  f3c2
   1448  f3c2				  -	      ifconst	interlaced
   1449  f3c2				  -	      CPX	#4
   1450  f3c2				  -	      BNE	oddframevsync
   1451  f3c2					      endif
   1452  f3c2
   1453  f3c2		       a9 02		      lda	#2
   1454  f3c4		       85 02		      sta	WSYNC
   1455  f3c6		       85 00		      sta	VSYNC
   1456  f3c8		       85 02		      STA	WSYNC
   1457  f3ca		       85 02		      STA	WSYNC
   1458  f3cc		       4a		      lsr
   1459  f3cd		       85 02		      STA	WSYNC
   1460  f3cf		       85 00		      STA	VSYNC
   1461  f3d1		       85 01		      sta	VBLANK
   1462  f3d3					      ifnconst	overscan_time
   1463  f3d3		       a9 a5		      lda	#37+128
   1464  f3d5				  -	      else
   1465  f3d5				  -	      lda	#overscan_time+128
   1466  f3d5					      endif
   1467  f3d5		       8d 96 02 	      sta	TIM64T
   1468  f3d8
   1469  f3d8				  -	      ifconst	interlaced
   1470  f3d8				  -	      jmp	postsync
   1471  f3d8				  -
   1472  f3d8				  -oddframevsync
   1473  f3d8				  -	      sta	WSYNC
   1474  f3d8				  -
   1475  f3d8				  -	      LDA	($80,X)	; 11 waste
   1476  f3d8				  -	      LDA	($80,X)	; 11 waste
   1477  f3d8				  -	      LDA	($80,X)	; 11 waste
   1478  f3d8				  -
   1479  f3d8				  -	      lda	#2
   1480  f3d8				  -	      sta	VSYNC
   1481  f3d8				  -	      sta	WSYNC
   1482  f3d8				  -	      sta	WSYNC
   1483  f3d8				  -	      sta	WSYNC
   1484  f3d8				  -
   1485  f3d8				  -	      LDA	($80,X)	; 11 waste
   1486  f3d8				  -	      LDA	($80,X)	; 11 waste
   1487  f3d8				  -	      LDA	($80,X)	; 11 waste
   1488  f3d8				  -
   1489  f3d8				  -	      lda	#0
   1490  f3d8				  -	      sta	VSYNC
   1491  f3d8				  -	      sta	VBLANK
   1492  f3d8				  -	      ifnconst	overscan_time
   1493  f3d8				  -	      lda	#37+128
   1494  f3d8				  -	      else
   1495  f3d8				  -	      lda	#overscan_time+128
   1496  f3d8				  -	      endif
   1497  f3d8				  -	      sta	TIM64T
   1498  f3d8				  -
   1499  f3d8				  -postsync
   1500  f3d8					      endif
   1501  f3d8
   1502  f3d8				  -	      ifconst	legacy
   1503  f3d8				  -	      if	legacy < 100
   1504  f3d8				  -	      ldx	#4
   1505  f3d8				  -adjustloop
   1506  f3d8				  -	      lda	player0x,x
   1507  f3d8				  -	      sec
   1508  f3d8				  -	      sbc	#14	;?
   1509  f3d8				  -	      sta	player0x,x
   1510  f3d8				  -	      dex
   1511  f3d8				  -	      bpl	adjustloop
   1512  f3d8				  -	      endif
   1513  f3d8					      endif
   1514  f3d8				  -	      if	((<*)>$e9)&&((<*)<$fa)
   1515  f3d8				  -	      repeat	($fa-(<*))
   1516  f3d8				  -	      nop
   1517  f3d8				  -	      repend
   1518  f3d8					      endif
   1519  f3d8		       85 02		      sta	WSYNC
   1520  f3da		       a2 04		      ldx	#4
      0  f3dc					      SLEEP	3
      1  f3dc				   .CYCLES    SET	3
      2  f3dc
      3  f3dc				  -	      IF	.CYCLES < 2
      4  f3dc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  f3dc				  -	      ERR
      6  f3dc					      ENDIF
      7  f3dc
      8  f3dc					      IF	.CYCLES & 1
      9  f3dc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  f3dc		       04 00		      nop	0
     11  f3de				  -	      ELSE
     12  f3de				  -	      bit	VSYNC
     13  f3de					      ENDIF
     14  f3de				   .CYCLES    SET	.CYCLES - 3
     15  f3de					      ENDIF
     16  f3de
     17  f3de				  -	      REPEAT	.CYCLES / 2
     18  f3de				  -	      nop
     19  f3de					      REPEND
   1522  f3de				   HorPosLoop		; 5
   1523  f3de		       b5 80		      lda	player0x,X	;+4 9
   1524  f3e0		       38		      sec		;+2 11
   1525  f3e1				   DivideLoop
   1526  f3e1		       e9 0f		      sbc	#15
   1527  f3e3		       b0 fc		      bcs	DivideLoop	;+4 15
   1528  f3e5		       95 9c		      sta	temp1,X	;+4 19
   1529  f3e7		       95 10		      sta	RESP0,X	;+4 23
   1530  f3e9		       85 02		      sta	WSYNC
   1531  f3eb		       ca		      dex
   1532  f3ec		       10 f0		      bpl	HorPosLoop	;+5 5
   1533  f3ee							; 4
   1534  f3ee
   1535  f3ee		       a2 04		      ldx	#4
   1536  f3f0		       b4 9c		      ldy	temp1,X
   1537  f3f2		       b9 4e f3 	      lda	repostable-256,Y
   1538  f3f5		       95 20		      sta	HMP0,X	;+14 18
   1539  f3f7
   1540  f3f7		       ca		      dex
   1541  f3f8		       b4 9c		      ldy	temp1,X
   1542  f3fa		       b9 4e f3 	      lda	repostable-256,Y
   1543  f3fd		       95 20		      sta	HMP0,X	;+14 32
   1544  f3ff
   1545  f3ff		       ca		      dex
   1546  f400		       b4 9c		      ldy	temp1,X
   1547  f402		       b9 4e f3 	      lda	repostable-256,Y
   1548  f405		       95 20		      sta	HMP0,X	;+14 46
   1549  f407
   1550  f407		       ca		      dex
   1551  f408		       b4 9c		      ldy	temp1,X
   1552  f40a		       b9 4e f3 	      lda	repostable-256,Y
   1553  f40d		       95 20		      sta	HMP0,X	;+14 60
   1554  f40f
   1555  f40f		       ca		      dex
   1556  f410		       b4 9c		      ldy	temp1,X
   1557  f412		       b9 4e f3 	      lda	repostable-256,Y
   1558  f415		       95 20		      sta	HMP0,X	;+14 74
   1559  f417
   1560  f417		       85 02		      sta	WSYNC
   1561  f419
   1562  f419		       85 2a		      sta	HMOVE	;+3 3
   1563  f41b
   1564  f41b
   1565  f41b				  -	      ifconst	legacy
   1566  f41b				  -	      if	legacy < 100
   1567  f41b				  -	      ldx	#4
   1568  f41b				  -adjustloop2
   1569  f41b				  -	      lda	player0x,x
   1570  f41b				  -	      clc
   1571  f41b				  -	      adc	#14	;?
   1572  f41b				  -	      sta	player0x,x
   1573  f41b				  -	      dex
   1574  f41b				  -	      bpl	adjustloop2
   1575  f41b				  -	      endif
   1576  f41b					      endif
   1577  f41b
   1578  f41b
   1579  f41b
   1580  f41b
   1581  f41b							;set score pointers
   1582  f41b		       a7 95		      lax	score+2
   1583  f41d		       20 4e f4 	      jsr	scorepointerset
   1584  f420		       84 9b		      sty	scorepointers+5
   1585  f422		       86 98		      stx	scorepointers+2
   1586  f424		       a7 94		      lax	score+1
   1587  f426		       20 4e f4 	      jsr	scorepointerset
   1588  f429		       84 9a		      sty	scorepointers+4
   1589  f42b		       86 97		      stx	scorepointers+1
   1590  f42d		       a7 93		      lax	score
   1591  f42f		       20 4e f4 	      jsr	scorepointerset
   1592  f432		       84 99		      sty	scorepointers+3
   1593  f434		       86 96		      stx	scorepointers
   1594  f436
   1595  f436				   vblk
   1596  f436							; run possible vblank bB code
   1597  f436				  -	      ifconst	vblank_bB_code
   1598  f436				  -	      jsr	vblank_bB_code
   1599  f436					      endif
   1600  f436				   vblk2
   1601  f436		       ad 84 02 	      LDA	INTIM
   1602  f439		       30 fb		      bmi	vblk2
   1603  f43b		       4c 34 f0 	      jmp	kernel
   1604  f43e
   1605  f43e
   1606  f43e		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   1607  f447		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   1608  f44e				   repostable
   1609  f44e
   1610  f44e				   scorepointerset
   1611  f44e		       29 0f		      and	#$0F
   1612  f450		       0a		      asl
   1613  f451		       0a		      asl
   1614  f452		       0a		      asl
   1615  f453		       69 9c		      adc	#<scoretable
   1616  f455		       a8		      tay
   1617  f456		       8a		      txa
   1618  f457							; and #$F0
   1619  f457							; lsr
   1620  f457		       4b f0		      asr	#$F0
   1621  f459		       69 9c		      adc	#<scoretable
   1622  f45b		       aa		      tax
   1623  f45c		       60		      rts
   1624  f45d				   game
   1625  f45d				   .L00 		;  rem   SPIDER GAME
   1626  f45d
   1627  f45d				   .L01 		;  rem
   1628  f45d
   1629  f45d				   .L02 		;  rem   Authors:
   1630  f45d
   1631  f45d				   .L03 		;  rem    Programmer --> Ethan Wilson
   1632  f45d
   1633  f45d				   .L04 		;  rem    Designer ----> Evan Brook
   1634  f45d
   1635  f45d				   .L05 		;  rem    Producer ----> DJ Baker
   1636  f45d
   1637  f45d				   .L06 		;  rem
   1638  f45d
   1639  f45d				   .L07 		;  rem In a future where everyone was forced to retreat underground
   1640  f45d
   1641  f45d				   .L08 		;  rem after nuclear war ravaged the surface, a new dominant race emerged:
   1642  f45d
   1643  f45d				   .L09 		;  rem giant, man-eating spiders. One player is the spider, and they are trying
   1644  f45d
   1645  f45d				   .L010		;  rem  to get their next meal. The other player is the human, who is trying to
   1646  f45d
   1647  f45d				   .L011		;  rem escape from the spider?s lair and keep from becoming its next meal.
   1648  f45d
   1649  f45d				   .L012		;  rem Unfortunately for the human, the spider?s home is confusing and they
   1650  f45d
   1651  f45d				   .L013		;  rem will have to find and hit the switch to open up an escape route to
   1652  f45d
   1653  f45d				   .L014		;  rem leave the maze. Unfortunately for the spider, it?s slow.
   1654  f45d
   1655  f45d				   .L015		;  rem
   1656  f45d
   1657  f45d				   .L016		;  rem The spider is Player0
   1658  f45d
   1659  f45d				   .L017		;  rem The human is Player1
   1660  f45d
   1661  f45d				   .L018		;  rem To start the game, press Player0's fire button
   1662  f45d
   1663  f45d				   .L019		;  rem
   1664  f45d
   1665  f45d				   .L020		;  rem The Human's objective is to find the button located in the middle of
   1666  f45d
   1667  f45d				   .L021		;  rem the maze, and escape through the pathway that opens up.
   1668  f45d
   1669  f45d				   .L022		;  rem
   1670  f45d
   1671  f45d				   .L023		;  rem The Spider's objective is to catch the human and eat them.
   1672  f45d
   1673  f45d				   .L024		;  rem
   1674  f45d
   1675  f45d				   .L025		;  rem There are five levels.	The game starts in the middle level.  One player
   1676  f45d
   1677  f45d				   .L026		;  rem must continuously win levels until GAME OVER is reached.  It's kind of
   1678  f45d
   1679  f45d				   .L027		;  rem like tug-of-war in the sense that you must be winning by a certain amount
   1680  f45d
   1681  f45d				   .L028		;  rem in order to win the entire game.
   1682  f45d
   1683  f45d				   .
   1684  f45d							;
   1685  f45d
   1686  f45d				   .init
   1687  f45d							; init
   1688  f45d
   1689  f45d				   .
   1690  f45d							;
   1691  f45d
   1692  f45d				   .L029		;  rem MONSTER SPRITE
   1693  f45d
   1694  f45d				   .L030		;  player0:
   1695  f45d
   1696  f45d		       a2 a1		      LDX	#<playerL030_0
   1697  f45f		       86 8a		      STX	player0pointerlo
   1698  f461		       a9 fa		      LDA	#>playerL030_0
   1699  f463		       85 8b		      STA	player0pointerhi
   1700  f465		       a9 06		      LDA	#6
   1701  f467		       85 8e		      STA	player0height
   1702  f469				   .
   1703  f469							;
   1704  f469
   1705  f469				   .L031		;  rem HUMAN SPRITE
   1706  f469
   1707  f469				   .L032		;  player1:
   1708  f469
   1709  f469		       a2 a8		      LDX	#<playerL032_1
   1710  f46b		       86 8c		      STX	player1pointerlo
   1711  f46d		       a9 fa		      LDA	#>playerL032_1
   1712  f46f		       85 8d		      STA	player1pointerhi
   1713  f471		       a9 06		      LDA	#6
   1714  f473		       85 8f		      STA	player1height
   1715  f475				   .
   1716  f475							;
   1717  f475
   1718  f475				   .L033		;  rem POSITIONS
   1719  f475
   1720  f475				   .L034		;  rem x,y --> MONSTER COORDINATES
   1721  f475
   1722  f475				   .L035		;  rem v,z --> HUMAN  COORDINATES
   1723  f475
   1724  f475				   .
   1725  f475							;
   1726  f475
   1727  f475				   .L036		;  rem VARIABLES USED TO STORE DIRECTIONAL INPUTS FOR COLLISION PREVENTION
   1728  f475
   1729  f475				   .L037		;  rem a --> left
   1730  f475
   1731  f475				   .L038		;  rem d --> right
   1732  f475
   1733  f475				   .L039		;  rem s --> down
   1734  f475
   1735  f475				   .L040		;  rem w --> up
   1736  f475
   1737  f475				   .L041		;  a  =  0  :	d  =  0  :  s  =  0  :	w  =  0
   1738  f475
   1739  f475		       a9 00		      LDA	#0
   1740  f477		       85 d4		      STA	a
   1741  f479		       85 d7		      STA	d
   1742  f47b		       85 e6		      STA	s
   1743  f47d		       85 ea		      STA	w
   1744  f47f				   .
   1745  f47f							;
   1746  f47f
   1747  f47f				   .L042		;  rem GAME STATES (c)
   1748  f47f
   1749  f47f				   .L043		;  rem -1 -> title screen
   1750  f47f
   1751  f47f				   .L044		;  rem 0 --> game over
   1752  f47f
   1753  f47f				   .L045		;  rem 1 --> set up monster level 2
   1754  f47f
   1755  f47f				   .L046		;  rem 2 --> set up monster level 1
   1756  f47f
   1757  f47f				   .L047		;  rem 3 --> set up middle level
   1758  f47f
   1759  f47f				   .L048		;  rem 4 --> set up human level 1
   1760  f47f
   1761  f47f				   .L049		;  rem 5 --> set up human level 2
   1762  f47f
   1763  f47f				   .L050		;  rem 6 --> game over
   1764  f47f
   1765  f47f				   .L051		;  rem 101 --> level -2 ongoing
   1766  f47f
   1767  f47f				   .L052		;  rem 102 --> level -1 ongoing
   1768  f47f
   1769  f47f				   .L053		;  rem 103 --> level 0 ongoing
   1770  f47f
   1771  f47f				   .L054		;  rem 104 --> level 1 ongoing
   1772  f47f
   1773  f47f				   .L055		;  rem 105 --> level 2 ongoing
   1774  f47f
   1775  f47f				   .L056		;  rem ...
   1776  f47f
   1777  f47f				   .L057		;  c  =   - 1
   1778  f47f
   1779  f47f		       a9 ff		      LDA	#255
   1780  f481		       85 d6		      STA	c
   1781  f483				   .
   1782  f483							;
   1783  f483
   1784  f483				   .L058		;  rem STORES WHETHER BUTTON HAS BEEN PRESSED BY PLAYER (g)
   1785  f483
   1786  f483				   .L059		;  rem 0 --> not pressed yet
   1787  f483
   1788  f483				   .L060		;  rem 1 --> pressed, wall opens up
   1789  f483
   1790  f483				   .L061		;  g  =  0
   1791  f483
   1792  f483		       a9 00		      LDA	#0
   1793  f485		       85 da		      STA	g
   1794  f487				   .
   1795  f487							;
   1796  f487
   1797  f487				   .L062		;  rem THIS MANIPULATES BALL DIMENSIONS
   1798  f487
   1799  f487				   .L063		;  CTRLPF  =  $21
   1800  f487
   1801  f487		       a9 21		      LDA	#$21
   1802  f489		       85 0a		      STA	CTRLPF
   1803  f48b				   .L064		;  ballheight	=  4
   1804  f48b
   1805  f48b		       a9 04		      LDA	#4
   1806  f48d		       85 92		      STA	ballheight
   1807  f48f				   .
   1808  f48f							;
   1809  f48f
   1810  f48f				   .mainloop
   1811  f48f							; mainloop
   1812  f48f
   1813  f48f				   .L065		;  rem SETS UP THE LEVEL
   1814  f48f
   1815  f48f				   .L066		;  if c  =  1 then gosub monsterlevel2
   1816  f48f
   1817  f48f		       a5 d6		      LDA	c
   1818  f491		       c9 01		      CMP	#1
   1819  f493		       d0 03		      BNE	.skipL066
   1820  f495				   .condpart0
   1821  f495		       20 f7 f7 	      jsr	.monsterlevel2
   1822  f498
   1823  f498				   .skipL066
   1824  f498				   .L067		;  if c  =  2 then gosub monsterlevel1
   1825  f498
   1826  f498		       a5 d6		      LDA	c
   1827  f49a		       c9 02		      CMP	#2
   1828  f49c		       d0 03		      BNE	.skipL067
   1829  f49e				   .condpart1
   1830  f49e		       20 6b f8 	      jsr	.monsterlevel1
   1831  f4a1
   1832  f4a1				   .skipL067
   1833  f4a1				   .L068		;  if c  =  3 then gosub middlelevel
   1834  f4a1
   1835  f4a1		       a5 d6		      LDA	c
   1836  f4a3		       c9 03		      CMP	#3
   1837  f4a5		       d0 03		      BNE	.skipL068
   1838  f4a7				   .condpart2
   1839  f4a7		       20 df f8 	      jsr	.middlelevel
   1840  f4aa
   1841  f4aa				   .skipL068
   1842  f4aa				   .L069		;  if c  =  4 then gosub humanlevel1
   1843  f4aa
   1844  f4aa		       a5 d6		      LDA	c
   1845  f4ac		       c9 04		      CMP	#4
   1846  f4ae		       d0 03		      BNE	.skipL069
   1847  f4b0				   .condpart3
   1848  f4b0		       20 53 f9 	      jsr	.humanlevel1
   1849  f4b3
   1850  f4b3				   .skipL069
   1851  f4b3				   .L070		;  if c  =  5 then gosub humanlevel2
   1852  f4b3
   1853  f4b3		       a5 d6		      LDA	c
   1854  f4b5		       c9 05		      CMP	#5
   1855  f4b7		       d0 03		      BNE	.skipL070
   1856  f4b9				   .condpart4
   1857  f4b9		       20 c7 f9 	      jsr	.humanlevel2
   1858  f4bc
   1859  f4bc				   .skipL070
   1860  f4bc				   .
   1861  f4bc							;
   1862  f4bc
   1863  f4bc				   .L071		;  drawscreen
   1864  f4bc
   1865  f4bc		       20 bd f3 	      jsr	drawscreen
   1866  f4bf				   .L072		;  rem THE CHARACTERS TURNED INVISIBLE WITHOUT THIS DUPLICATE
   1867  f4bf
   1868  f4bf				   .L073		;  COLUP0  =  1  :  COLUP1  =	39
   1869  f4bf
   1870  f4bf		       a9 01		      LDA	#1
   1871  f4c1		       85 06		      STA	COLUP0
   1872  f4c3		       a9 27		      LDA	#39
   1873  f4c5		       85 07		      STA	COLUP1
   1874  f4c7				   .L074		;  drawscreen
   1875  f4c7
   1876  f4c7		       20 bd f3 	      jsr	drawscreen
   1877  f4ca				   .
   1878  f4ca							;
   1879  f4ca
   1880  f4ca				   .L075		;  rem USING GOTO MAKES THESE SHOW A STATIC SCREEN (unable to move characters)
   1881  f4ca
   1882  f4ca				   .L076		;  if c  =   - 1 then goto title
   1883  f4ca
   1884  f4ca							; complex condition detected
   1885  f4ca		       a9 ff		      LDA	#255
   1886  f4cc		       48		      PHA
   1887  f4cd		       ba		      TSX
   1888  f4ce		       68		      PLA
   1889  f4cf		       a5 d6		      LDA	c
   1890  f4d1		       d5 01		      CMP	1,x
   1891  f4d3		       d0 03		      BNE	.skipL076
   1892  f4d5				   .condpart5
   1893  f4d5		       4c 93 f7 	      jmp	.title
   1894  f4d8
   1895  f4d8				   .skipL076
   1896  f4d8				   .L077		;  if c  =  0 then goto gameover
   1897  f4d8
   1898  f4d8		       a5 d6		      LDA	c
   1899  f4da		       c9 00		      CMP	#0
   1900  f4dc		       d0 03		      BNE	.skipL077
   1901  f4de				   .condpart6
   1902  f4de		       4c 3b fa 	      jmp	.gameover
   1903  f4e1
   1904  f4e1				   .skipL077
   1905  f4e1				   .
   1906  f4e1							;
   1907  f4e1
   1908  f4e1				   .L078		;  rem POSITION UPDATE
   1909  f4e1
   1910  f4e1				   .L079		;  player0x  =  x  :  player0y  =  y  :  player1x  =  v  :  player1y  =  z
   1911  f4e1
   1912  f4e1		       a5 eb		      LDA	x
   1913  f4e3		       85 80		      STA	player0x
   1914  f4e5		       a5 ec		      LDA	y
   1915  f4e7		       85 85		      STA	player0y
   1916  f4e9		       a5 e9		      LDA	v
   1917  f4eb		       85 81		      STA	player1x
   1918  f4ed		       a5 ed		      LDA	z
   1919  f4ef		       85 86		      STA	player1y
   1920  f4f1				   .
   1921  f4f1							;
   1922  f4f1
   1923  f4f1				   .L080		;  rem COLORING CHARACTERS
   1924  f4f1
   1925  f4f1				   .L081		;  COLUP0  =  1  :  COLUP1  =	39
   1926  f4f1
   1927  f4f1		       a9 01		      LDA	#1
   1928  f4f3		       85 06		      STA	COLUP0
   1929  f4f5		       a9 27		      LDA	#39
   1930  f4f7		       85 07		      STA	COLUP1
   1931  f4f9				   .
   1932  f4f9							;
   1933  f4f9
   1934  f4f9				   .L082		;  rem BUTTON PRESS, OPEN WALL
   1935  f4f9
   1936  f4f9				   .L083		;  if collision(player1,ball) then gosub buttonpress
   1937  f4f9
   1938  f4f9		       24 03		      bit	CXP1FB
   1939  f4fb		       50 03		      BVC	.skipL083
   1940  f4fd				   .condpart7
   1941  f4fd		       20 fe f6 	      jsr	.buttonpress
   1942  f500
   1943  f500				   .skipL083
   1944  f500				   .
   1945  f500							;
   1946  f500
   1947  f500				   .L084		;  rem HUMAN DIES, GO BACK A LEVEL
   1948  f500
   1949  f500				   .L085		;  if collision(player0,player1)  &&  c  =  105 then c  =  4
   1950  f500
   1951  f500		       24 07		      bit	CXPPMM
   1952  f502		       10 0a		      BPL	.skipL085
   1953  f504				   .condpart8
   1954  f504		       a5 d6		      LDA	c
   1955  f506		       c9 69		      CMP	#105
   1956  f508		       d0 04		      BNE	.skip8then
   1957  f50a				   .condpart9
   1958  f50a		       a9 04		      LDA	#4
   1959  f50c		       85 d6		      STA	c
   1960  f50e				   .skip8then
   1961  f50e				   .skipL085
   1962  f50e				   .L086		;  if collision(player0,player1)  &&  c  =  104 then c  =  3
   1963  f50e
   1964  f50e		       24 07		      bit	CXPPMM
   1965  f510		       10 0a		      BPL	.skipL086
   1966  f512				   .condpart10
   1967  f512		       a5 d6		      LDA	c
   1968  f514		       c9 68		      CMP	#104
   1969  f516		       d0 04		      BNE	.skip10then
   1970  f518				   .condpart11
   1971  f518		       a9 03		      LDA	#3
   1972  f51a		       85 d6		      STA	c
   1973  f51c				   .skip10then
   1974  f51c				   .skipL086
   1975  f51c				   .L087		;  if collision(player0,player1)  &&  c  =  103 then c  =  2
   1976  f51c
   1977  f51c		       24 07		      bit	CXPPMM
   1978  f51e		       10 0a		      BPL	.skipL087
   1979  f520				   .condpart12
   1980  f520		       a5 d6		      LDA	c
   1981  f522		       c9 67		      CMP	#103
   1982  f524		       d0 04		      BNE	.skip12then
   1983  f526				   .condpart13
   1984  f526		       a9 02		      LDA	#2
   1985  f528		       85 d6		      STA	c
   1986  f52a				   .skip12then
   1987  f52a				   .skipL087
   1988  f52a				   .L088		;  if collision(player0,player1)  &&  c  =  102 then c  =  1
   1989  f52a
   1990  f52a		       24 07		      bit	CXPPMM
   1991  f52c		       10 0a		      BPL	.skipL088
   1992  f52e				   .condpart14
   1993  f52e		       a5 d6		      LDA	c
   1994  f530		       c9 66		      CMP	#102
   1995  f532		       d0 04		      BNE	.skip14then
   1996  f534				   .condpart15
   1997  f534		       a9 01		      LDA	#1
   1998  f536		       85 d6		      STA	c
   1999  f538				   .skip14then
   2000  f538				   .skipL088
   2001  f538				   .L089		;  if collision(player0,player1)  &&  c  =  101 then c  =  0
   2002  f538
   2003  f538		       24 07		      bit	CXPPMM
   2004  f53a		       10 0a		      BPL	.skipL089
   2005  f53c				   .condpart16
   2006  f53c		       a5 d6		      LDA	c
   2007  f53e		       c9 65		      CMP	#101
   2008  f540		       d0 04		      BNE	.skip16then
   2009  f542				   .condpart17
   2010  f542		       a9 00		      LDA	#0
   2011  f544		       85 d6		      STA	c
   2012  f546				   .skip16then
   2013  f546				   .skipL089
   2014  f546				   .
   2015  f546							;
   2016  f546
   2017  f546				   .
   2018  f546							;
   2019  f546
   2020  f546				   .
   2021  f546							;
   2022  f546
   2023  f546				   .L090		;  rem PREVENTS PLAYERS FROM GOING THROUGH WALLS
   2024  f546
   2025  f546				   .L091		;  if collision(player0,playfield) then gosub collision0
   2026  f546
   2027  f546		       24 02		      bit	CXP0FB
   2028  f548		       10 03		      BPL	.skipL091
   2029  f54a				   .condpart18
   2030  f54a		       20 49 f6 	      jsr	.collision0
   2031  f54d
   2032  f54d				   .skipL091
   2033  f54d				   .L092		;  if collision(player1,playfield)  &&  !collision(player0,playfield) then gosub collision1
   2034  f54d
   2035  f54d		       24 03		      bit	CXP1FB
   2036  f54f		       10 07		      BPL	.skipL092
   2037  f551				   .condpart19
   2038  f551		       24 02		      bit	CXP0FB
   2039  f553		       30 03		      BMI	.skip19then
   2040  f555				   .condpart20
   2041  f555		       20 9d f6 	      jsr	.collision1
   2042  f558
   2043  f558				   .skip19then
   2044  f558				   .skipL092
   2045  f558				   .
   2046  f558							;
   2047  f558
   2048  f558				   .L093		;  rem RESET DIRECTION INDICATORS FOR NEXTITERATION
   2049  f558
   2050  f558				   .L094		;  a  =  0  :	d  =  0  :  s  =  0  :	w  =  0
   2051  f558
   2052  f558		       a9 00		      LDA	#0
   2053  f55a		       85 d4		      STA	a
   2054  f55c		       85 d7		      STA	d
   2055  f55e		       85 e6		      STA	s
   2056  f560		       85 ea		      STA	w
   2057  f562				   .
   2058  f562							;
   2059  f562
   2060  f562				   .L095		;  rem CHECK TO SEE IF PLAYER HAS BROKEN OUT OF THE MAZE
   2061  f562
   2062  f562				   .L096		;  rem playerx = 140 --> right bound
   2063  f562
   2064  f562				   .L097		;  rem playerx = ??? --> left bound
   2065  f562
   2066  f562				   .L098		;  rem playery = ??? --> upper bound
   2067  f562
   2068  f562				   .L099		;  rem playery = ??? --> lower bound
   2069  f562
   2070  f562				   .
   2071  f562							;
   2072  f562
   2073  f562				   .L0100		;  rem PLAYER BREAKS OUT OF MAZE TO NEXT LEVEL
   2074  f562
   2075  f562				   .L0101		;  if player1x  >  140  &&  c	=  101 then c  =  2
   2076  f562
   2077  f562		       a9 8c		      LDA	#140
   2078  f564		       c5 81		      CMP	player1x
   2079  f566		       b0 0a		      BCS	.skipL0101
   2080  f568				   .condpart21
   2081  f568		       a5 d6		      LDA	c
   2082  f56a		       c9 65		      CMP	#101
   2083  f56c		       d0 04		      BNE	.skip21then
   2084  f56e				   .condpart22
   2085  f56e		       a9 02		      LDA	#2
   2086  f570		       85 d6		      STA	c
   2087  f572				   .skip21then
   2088  f572				   .skipL0101
   2089  f572				   .L0102		;  if player1x  >  140  &&  c	=  102 then c  =  3
   2090  f572
   2091  f572		       a9 8c		      LDA	#140
   2092  f574		       c5 81		      CMP	player1x
   2093  f576		       b0 0a		      BCS	.skipL0102
   2094  f578				   .condpart23
   2095  f578		       a5 d6		      LDA	c
   2096  f57a		       c9 66		      CMP	#102
   2097  f57c		       d0 04		      BNE	.skip23then
   2098  f57e				   .condpart24
   2099  f57e		       a9 03		      LDA	#3
   2100  f580		       85 d6		      STA	c
   2101  f582				   .skip23then
   2102  f582				   .skipL0102
   2103  f582				   .L0103		;  if player1x  >  140  &&  c	=  103 then c  =  4
   2104  f582
   2105  f582		       a9 8c		      LDA	#140
   2106  f584		       c5 81		      CMP	player1x
   2107  f586		       b0 0a		      BCS	.skipL0103
   2108  f588				   .condpart25
   2109  f588		       a5 d6		      LDA	c
   2110  f58a		       c9 67		      CMP	#103
   2111  f58c		       d0 04		      BNE	.skip25then
   2112  f58e				   .condpart26
   2113  f58e		       a9 04		      LDA	#4
   2114  f590		       85 d6		      STA	c
   2115  f592				   .skip25then
   2116  f592				   .skipL0103
   2117  f592				   .L0104		;  if player1x  >  140  &&  c	=  104 then c  =  5
   2118  f592
   2119  f592		       a9 8c		      LDA	#140
   2120  f594		       c5 81		      CMP	player1x
   2121  f596		       b0 0a		      BCS	.skipL0104
   2122  f598				   .condpart27
   2123  f598		       a5 d6		      LDA	c
   2124  f59a		       c9 68		      CMP	#104
   2125  f59c		       d0 04		      BNE	.skip27then
   2126  f59e				   .condpart28
   2127  f59e		       a9 05		      LDA	#5
   2128  f5a0		       85 d6		      STA	c
   2129  f5a2				   .skip27then
   2130  f5a2				   .skipL0104
   2131  f5a2				   .L0105		;  if player1x  >  140  &&  c	=  105 then c  =  0
   2132  f5a2
   2133  f5a2		       a9 8c		      LDA	#140
   2134  f5a4		       c5 81		      CMP	player1x
   2135  f5a6		       b0 0a		      BCS	.skipL0105
   2136  f5a8				   .condpart29
   2137  f5a8		       a5 d6		      LDA	c
   2138  f5aa		       c9 69		      CMP	#105
   2139  f5ac		       d0 04		      BNE	.skip29then
   2140  f5ae				   .condpart30
   2141  f5ae		       a9 00		      LDA	#0
   2142  f5b0		       85 d6		      STA	c
   2143  f5b2				   .skip29then
   2144  f5b2				   .skipL0105
   2145  f5b2				   .
   2146  f5b2							;
   2147  f5b2
   2148  f5b2				   .L0106		;  rem MOVE CHARACTERS AND LOG INPUTS
   2149  f5b2
   2150  f5b2				   .L0107		;  rem MONSTER
   2151  f5b2
   2152  f5b2				   .L0108		;  if joy0left then a	=  1  :  x  =  x  -  1
   2153  f5b2
   2154  f5b2		       2c 80 02 	      bit	SWCHA
   2155  f5b5		       70 06		      BVS	.skipL0108
   2156  f5b7				   .condpart31
   2157  f5b7		       a9 01		      LDA	#1
   2158  f5b9		       85 d4		      STA	a
   2159  f5bb		       c6 eb		      DEC	x
   2160  f5bd				   .skipL0108
   2161  f5bd				   .L0109		;  if joy0right then d  =  1  :  x  =	x  +  1
   2162  f5bd
   2163  f5bd		       2c 80 02 	      bit	SWCHA
   2164  f5c0		       30 06		      BMI	.skipL0109
   2165  f5c2				   .condpart32
   2166  f5c2		       a9 01		      LDA	#1
   2167  f5c4		       85 d7		      STA	d
   2168  f5c6		       e6 eb		      INC	x
   2169  f5c8				   .skipL0109
   2170  f5c8				   .L0110		;  if joy0up then w  =  1  :  y  =  y	-  1
   2171  f5c8
   2172  f5c8		       a9 10		      lda	#$10
   2173  f5ca		       2c 80 02 	      bit	SWCHA
   2174  f5cd		       d0 06		      BNE	.skipL0110
   2175  f5cf				   .condpart33
   2176  f5cf		       a9 01		      LDA	#1
   2177  f5d1		       85 ea		      STA	w
   2178  f5d3		       c6 ec		      DEC	y
   2179  f5d5				   .skipL0110
   2180  f5d5				   .L0111		;  if joy0down then s	=  1  :  y  =  y  +  1
   2181  f5d5
   2182  f5d5		       a9 20		      lda	#$20
   2183  f5d7		       2c 80 02 	      bit	SWCHA
   2184  f5da		       d0 06		      BNE	.skipL0111
   2185  f5dc				   .condpart34
   2186  f5dc		       a9 01		      LDA	#1
   2187  f5de		       85 e6		      STA	s
   2188  f5e0		       e6 ec		      INC	y
   2189  f5e2				   .skipL0111
   2190  f5e2				   .L0112		;  rem HUMAN
   2191  f5e2
   2192  f5e2				   .L0113		;  if joy1left then a	=  a  +  2  :  v  =  v	-  2
   2193  f5e2
   2194  f5e2		       a9 04		      lda	#4
   2195  f5e4		       2c 80 02 	      bit	SWCHA
   2196  f5e7		       d0 0e		      BNE	.skipL0113
   2197  f5e9				   .condpart35
   2198  f5e9		       a5 d4		      LDA	a
   2199  f5eb		       18		      CLC
   2200  f5ec		       69 02		      ADC	#2
   2201  f5ee		       85 d4		      STA	a
   2202  f5f0		       a5 e9		      LDA	v
   2203  f5f2		       38		      SEC
   2204  f5f3		       e9 02		      SBC	#2
   2205  f5f5		       85 e9		      STA	v
   2206  f5f7				   .skipL0113
   2207  f5f7				   .L0114		;  if joy1right then d  =  d  +  2  :	v  =  v  +  2
   2208  f5f7
   2209  f5f7		       a9 08		      lda	#8
   2210  f5f9		       2c 80 02 	      bit	SWCHA
   2211  f5fc		       d0 0e		      BNE	.skipL0114
   2212  f5fe				   .condpart36
   2213  f5fe		       a5 d7		      LDA	d
   2214  f600		       18		      CLC
   2215  f601		       69 02		      ADC	#2
   2216  f603		       85 d7		      STA	d
   2217  f605		       a5 e9		      LDA	v
   2218  f607		       18		      CLC
   2219  f608		       69 02		      ADC	#2
   2220  f60a		       85 e9		      STA	v
   2221  f60c				   .skipL0114
   2222  f60c				   .L0115		;  if joy1up then w  =  w  +  2  :  z	=  z  -  2
   2223  f60c
   2224  f60c		       a9 01		      lda	#1
   2225  f60e		       2c 80 02 	      bit	SWCHA
   2226  f611		       d0 0e		      BNE	.skipL0115
   2227  f613				   .condpart37
   2228  f613		       a5 ea		      LDA	w
   2229  f615		       18		      CLC
   2230  f616		       69 02		      ADC	#2
   2231  f618		       85 ea		      STA	w
   2232  f61a		       a5 ed		      LDA	z
   2233  f61c		       38		      SEC
   2234  f61d		       e9 02		      SBC	#2
   2235  f61f		       85 ed		      STA	z
   2236  f621				   .skipL0115
   2237  f621				   .L0116		;  if joy1down then s	=  s  +  2  :  z  =  z	+  2
   2238  f621
   2239  f621		       a9 02		      lda	#2
   2240  f623		       2c 80 02 	      bit	SWCHA
   2241  f626		       d0 0e		      BNE	.skipL0116
   2242  f628				   .condpart38
   2243  f628		       a5 e6		      LDA	s
   2244  f62a		       18		      CLC
   2245  f62b		       69 02		      ADC	#2
   2246  f62d		       85 e6		      STA	s
   2247  f62f		       a5 ed		      LDA	z
   2248  f631		       18		      CLC
   2249  f632		       69 02		      ADC	#2
   2250  f634		       85 ed		      STA	z
   2251  f636				   .skipL0116
   2252  f636				   .L0117		;  rem POSITION UPDATE
   2253  f636
   2254  f636				   .L0118		;  player0x  =  x  :  player0y  =  y  :  player1x  =  v  :  player1y  =  z
   2255  f636
   2256  f636		       a5 eb		      LDA	x
   2257  f638		       85 80		      STA	player0x
   2258  f63a		       a5 ec		      LDA	y
   2259  f63c		       85 85		      STA	player0y
   2260  f63e		       a5 e9		      LDA	v
   2261  f640		       85 81		      STA	player1x
   2262  f642		       a5 ed		      LDA	z
   2263  f644		       85 86		      STA	player1y
   2264  f646				   .
   2265  f646							;
   2266  f646
   2267  f646				   .L0119		;  goto mainloop
   2268  f646
   2269  f646		       4c 8f f4 	      jmp	.mainloop
   2270  f649
   2271  f649				   .
   2272  f649							;
   2273  f649
   2274  f649				   .
   2275  f649							;
   2276  f649
   2277  f649				   .L0120		;  rem COLLISION DETECTION
   2278  f649
   2279  f649				   .L0121		;  rem OPTIONS for ADSW ARE:
   2280  f649
   2281  f649				   .L0122		;  rem 0 --> no collision
   2282  f649
   2283  f649				   .L0123		;  rem 1 --> just MONSTER collided
   2284  f649
   2285  f649				   .L0124		;  rem 2 --> just human collided
   2286  f649
   2287  f649				   .L0125		;  rem 3 --> both collided
   2288  f649
   2289  f649				   .collision0
   2290  f649							; collision0
   2291  f649
   2292  f649				   .L0126		;  rem MONSTER COLLISION
   2293  f649
   2294  f649				   .L0127		;  if a  =  1	||  a  =  3 then x  =  x  +  1
   2295  f649
   2296  f649		       a5 d4		      LDA	a
   2297  f64b		       c9 01		      CMP	#1
   2298  f64d		       d0 03		      BNE	.skipL0127
   2299  f64f				   .condpart39
   2300  f64f		       4c 58 f6 	      jmp	.condpart40
   2301  f652				   .skipL0127
   2302  f652		       a5 d4		      LDA	a
   2303  f654		       c9 03		      CMP	#3
   2304  f656		       d0 02		      BNE	.skip11OR
   2305  f658				   .condpart40
   2306  f658		       e6 eb		      INC	x
   2307  f65a				   .skip11OR
   2308  f65a				   .L0128		;  if d  =  1	||  d  =  3 then x  =  x  -  1
   2309  f65a
   2310  f65a		       a5 d7		      LDA	d
   2311  f65c		       c9 01		      CMP	#1
   2312  f65e		       d0 03		      BNE	.skipL0128
   2313  f660				   .condpart41
   2314  f660		       4c 69 f6 	      jmp	.condpart42
   2315  f663				   .skipL0128
   2316  f663		       a5 d7		      LDA	d
   2317  f665		       c9 03		      CMP	#3
   2318  f667		       d0 02		      BNE	.skip12OR
   2319  f669				   .condpart42
   2320  f669		       c6 eb		      DEC	x
   2321  f66b				   .skip12OR
   2322  f66b				   .L0129		;  if w  =  1	||  w  =  3 then y  =  y  +  1
   2323  f66b
   2324  f66b		       a5 ea		      LDA	w
   2325  f66d		       c9 01		      CMP	#1
   2326  f66f		       d0 03		      BNE	.skipL0129
   2327  f671				   .condpart43
   2328  f671		       4c 7a f6 	      jmp	.condpart44
   2329  f674				   .skipL0129
   2330  f674		       a5 ea		      LDA	w
   2331  f676		       c9 03		      CMP	#3
   2332  f678		       d0 02		      BNE	.skip13OR
   2333  f67a				   .condpart44
   2334  f67a		       e6 ec		      INC	y
   2335  f67c				   .skip13OR
   2336  f67c				   .L0130		;  if s  =  1	||  s  =  3 then y  =  y  -  1
   2337  f67c
   2338  f67c		       a5 e6		      LDA	s
   2339  f67e		       c9 01		      CMP	#1
   2340  f680		       d0 03		      BNE	.skipL0130
   2341  f682				   .condpart45
   2342  f682		       4c 8b f6 	      jmp	.condpart46
   2343  f685				   .skipL0130
   2344  f685		       a5 e6		      LDA	s
   2345  f687		       c9 03		      CMP	#3
   2346  f689		       d0 02		      BNE	.skip14OR
   2347  f68b				   .condpart46
   2348  f68b		       c6 ec		      DEC	y
   2349  f68d				   .skip14OR
   2350  f68d				   .L0131		;  player0x  =  x  :  player0y  =  y
   2351  f68d
   2352  f68d		       a5 eb		      LDA	x
   2353  f68f		       85 80		      STA	player0x
   2354  f691		       a5 ec		      LDA	y
   2355  f693		       85 85		      STA	player0y
   2356  f695				   .L0132		;  rem CHECK IF HUMAN COLLIDED TOO
   2357  f695
   2358  f695				   .L0133		;  if collision(player1,playfield) then goto collision1
   2359  f695
   2360  f695		       24 03		      bit	CXP1FB
   2361  f697		       10 03		      BPL	.skipL0133
   2362  f699				   .condpart47
   2363  f699		       4c 9d f6 	      jmp	.collision1
   2364  f69c
   2365  f69c				   .skipL0133
   2366  f69c				   .L0134		;  return
   2367  f69c
   2368  f69c		       60		      RTS
   2369  f69d				   .
   2370  f69d							;
   2371  f69d
   2372  f69d				   .collision1
   2373  f69d							; collision1
   2374  f69d
   2375  f69d				   .L0135		;  rem FIX HUMAN (MONSTER is already fixed)
   2376  f69d
   2377  f69d				   .L0136		;  if a  =  2	||  a  =  3 then v  =  v  +  2
   2378  f69d
   2379  f69d		       a5 d4		      LDA	a
   2380  f69f		       c9 02		      CMP	#2
   2381  f6a1		       d0 03		      BNE	.skipL0136
   2382  f6a3				   .condpart48
   2383  f6a3		       4c ac f6 	      jmp	.condpart49
   2384  f6a6				   .skipL0136
   2385  f6a6		       a5 d4		      LDA	a
   2386  f6a8		       c9 03		      CMP	#3
   2387  f6aa		       d0 07		      BNE	.skip15OR
   2388  f6ac				   .condpart49
   2389  f6ac		       a5 e9		      LDA	v
   2390  f6ae		       18		      CLC
   2391  f6af		       69 02		      ADC	#2
   2392  f6b1		       85 e9		      STA	v
   2393  f6b3				   .skip15OR
   2394  f6b3				   .L0137		;  if d  =  2	||  d  =  3 then v  =  v  -  2
   2395  f6b3
   2396  f6b3		       a5 d7		      LDA	d
   2397  f6b5		       c9 02		      CMP	#2
   2398  f6b7		       d0 03		      BNE	.skipL0137
   2399  f6b9				   .condpart50
   2400  f6b9		       4c c2 f6 	      jmp	.condpart51
   2401  f6bc				   .skipL0137
   2402  f6bc		       a5 d7		      LDA	d
   2403  f6be		       c9 03		      CMP	#3
   2404  f6c0		       d0 07		      BNE	.skip16OR
   2405  f6c2				   .condpart51
   2406  f6c2		       a5 e9		      LDA	v
   2407  f6c4		       38		      SEC
   2408  f6c5		       e9 02		      SBC	#2
   2409  f6c7		       85 e9		      STA	v
   2410  f6c9				   .skip16OR
   2411  f6c9				   .L0138		;  if w  =  2	||  w  =  3 then z  =  z  +  2
   2412  f6c9
   2413  f6c9		       a5 ea		      LDA	w
   2414  f6cb		       c9 02		      CMP	#2
   2415  f6cd		       d0 03		      BNE	.skipL0138
   2416  f6cf				   .condpart52
   2417  f6cf		       4c d8 f6 	      jmp	.condpart53
   2418  f6d2				   .skipL0138
   2419  f6d2		       a5 ea		      LDA	w
   2420  f6d4		       c9 03		      CMP	#3
   2421  f6d6		       d0 07		      BNE	.skip17OR
   2422  f6d8				   .condpart53
   2423  f6d8		       a5 ed		      LDA	z
   2424  f6da		       18		      CLC
   2425  f6db		       69 02		      ADC	#2
   2426  f6dd		       85 ed		      STA	z
   2427  f6df				   .skip17OR
   2428  f6df				   .L0139		;  if s  =  2	||  s  =  3 then z  =  z  -  2
   2429  f6df
   2430  f6df		       a5 e6		      LDA	s
   2431  f6e1		       c9 02		      CMP	#2
   2432  f6e3		       d0 03		      BNE	.skipL0139
   2433  f6e5				   .condpart54
   2434  f6e5		       4c ee f6 	      jmp	.condpart55
   2435  f6e8				   .skipL0139
   2436  f6e8		       a5 e6		      LDA	s
   2437  f6ea		       c9 03		      CMP	#3
   2438  f6ec		       d0 07		      BNE	.skip18OR
   2439  f6ee				   .condpart55
   2440  f6ee		       a5 ed		      LDA	z
   2441  f6f0		       38		      SEC
   2442  f6f1		       e9 02		      SBC	#2
   2443  f6f3		       85 ed		      STA	z
   2444  f6f5				   .skip18OR
   2445  f6f5				   .L0140		;  player1x  =  v  :  player1y  =  z
   2446  f6f5
   2447  f6f5		       a5 e9		      LDA	v
   2448  f6f7		       85 81		      STA	player1x
   2449  f6f9		       a5 ed		      LDA	z
   2450  f6fb		       85 86		      STA	player1y
   2451  f6fd				   .L0141		;  return
   2452  f6fd
   2453  f6fd		       60		      RTS
   2454  f6fe				   .L0142		;  rem END OF COLLISION DETECTION
   2455  f6fe
   2456  f6fe				   .
   2457  f6fe							;
   2458  f6fe
   2459  f6fe				   .buttonpress
   2460  f6fe							; buttonpress
   2461  f6fe
   2462  f6fe				   .L0143		;  g  =  1
   2463  f6fe
   2464  f6fe		       a9 01		      LDA	#1
   2465  f700		       85 da		      STA	g
   2466  f702				   .L0144		;  rem WALL to REMOVE WILL CORRESPOND to THE LEVEL WE ARE IN
   2467  f702
   2468  f702				   .L0145		;  if c  =  101 then pfpixel 31 8 off	:  pfpixel 31 7 off
   2469  f702
   2470  f702		       a5 d6		      LDA	c
   2471  f704		       c9 65		      CMP	#101
   2472  f706		       d0 12		      BNE	.skipL0145
   2473  f708				   .condpart56
   2474  f708		       a2 01		      LDX	#1
   2475  f70a		       a0 08		      LDY	#8
   2476  f70c		       a9 1f		      LDA	#31
   2477  f70e		       20 78 f2 	      jsr	pfpixel
   2478  f711		       a2 01		      LDX	#1
   2479  f713		       a0 07		      LDY	#7
   2480  f715		       a9 1f		      LDA	#31
   2481  f717		       20 78 f2 	      jsr	pfpixel
   2482  f71a				   .skipL0145
   2483  f71a				   .L0146		;  if c  =  102 then pfpixel 31 5 off	:  pfpixel 31 6 off  :	pfpixel 31 7 off
   2484  f71a
   2485  f71a		       a5 d6		      LDA	c
   2486  f71c		       c9 66		      CMP	#102
   2487  f71e		       d0 1b		      BNE	.skipL0146
   2488  f720				   .condpart57
   2489  f720		       a2 01		      LDX	#1
   2490  f722		       a0 05		      LDY	#5
   2491  f724		       a9 1f		      LDA	#31
   2492  f726		       20 78 f2 	      jsr	pfpixel
   2493  f729		       a2 01		      LDX	#1
   2494  f72b		       a0 06		      LDY	#6
   2495  f72d		       a9 1f		      LDA	#31
   2496  f72f		       20 78 f2 	      jsr	pfpixel
   2497  f732		       a2 01		      LDX	#1
   2498  f734		       a0 07		      LDY	#7
   2499  f736		       a9 1f		      LDA	#31
   2500  f738		       20 78 f2 	      jsr	pfpixel
   2501  f73b				   .skipL0146
   2502  f73b				   .L0147		;  if c  =  103 then pfpixel 31 8 off	:  pfpixel 31 7 off  :	pfpixel 31 6 off
   2503  f73b
   2504  f73b		       a5 d6		      LDA	c
   2505  f73d		       c9 67		      CMP	#103
   2506  f73f		       d0 1b		      BNE	.skipL0147
   2507  f741				   .condpart58
   2508  f741		       a2 01		      LDX	#1
   2509  f743		       a0 08		      LDY	#8
   2510  f745		       a9 1f		      LDA	#31
   2511  f747		       20 78 f2 	      jsr	pfpixel
   2512  f74a		       a2 01		      LDX	#1
   2513  f74c		       a0 07		      LDY	#7
   2514  f74e		       a9 1f		      LDA	#31
   2515  f750		       20 78 f2 	      jsr	pfpixel
   2516  f753		       a2 01		      LDX	#1
   2517  f755		       a0 06		      LDY	#6
   2518  f757		       a9 1f		      LDA	#31
   2519  f759		       20 78 f2 	      jsr	pfpixel
   2520  f75c				   .skipL0147
   2521  f75c				   .L0148		;  if c  =  104 then pfpixel 31 7 off	:  pfpixel 31 8 off
   2522  f75c
   2523  f75c		       a5 d6		      LDA	c
   2524  f75e		       c9 68		      CMP	#104
   2525  f760		       d0 12		      BNE	.skipL0148
   2526  f762				   .condpart59
   2527  f762		       a2 01		      LDX	#1
   2528  f764		       a0 07		      LDY	#7
   2529  f766		       a9 1f		      LDA	#31
   2530  f768		       20 78 f2 	      jsr	pfpixel
   2531  f76b		       a2 01		      LDX	#1
   2532  f76d		       a0 08		      LDY	#8
   2533  f76f		       a9 1f		      LDA	#31
   2534  f771		       20 78 f2 	      jsr	pfpixel
   2535  f774				   .skipL0148
   2536  f774				   .L0149		;  if c  =  105 then pfpixel 31 9 off	:  pfpixel 31 8 off
   2537  f774
   2538  f774		       a5 d6		      LDA	c
   2539  f776		       c9 69		      CMP	#105
   2540  f778		       d0 12		      BNE	.skipL0149
   2541  f77a				   .condpart60
   2542  f77a		       a2 01		      LDX	#1
   2543  f77c		       a0 09		      LDY	#9
   2544  f77e		       a9 1f		      LDA	#31
   2545  f780		       20 78 f2 	      jsr	pfpixel
   2546  f783		       a2 01		      LDX	#1
   2547  f785		       a0 08		      LDY	#8
   2548  f787		       a9 1f		      LDA	#31
   2549  f789		       20 78 f2 	      jsr	pfpixel
   2550  f78c				   .skipL0149
   2551  f78c				   .L0150		;  rem REMOVE BUTTON
   2552  f78c
   2553  f78c				   .L0151		;  ballx  =  0  :  bally  =  0
   2554  f78c
   2555  f78c		       a9 00		      LDA	#0
   2556  f78e		       85 84		      STA	ballx
   2557  f790		       85 89		      STA	bally
   2558  f792				   .L0152		;  return
   2559  f792
   2560  f792		       60		      RTS
   2561  f793				   .
   2562  f793							;
   2563  f793
   2564  f793				   .
   2565  f793							;
   2566  f793
   2567  f793				   .L0153		;  rem GAME STATES AND THEIR UPDATES to CONSTANTS/VARIABLES
   2568  f793
   2569  f793				   .L0154		;  rem PLAYFIELD dimensions (32 x 11)
   2570  f793
   2571  f793				   .L0155		;  rem PLAYERS take up ~1 unit of the playfield
   2572  f793
   2573  f793				   .title
   2574  f793							; title
   2575  f793
   2576  f793				   .L0156		;  playfield:
   2577  f793
   2578  f793				  -	      ifconst	pfres
   2579  f793				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2580  f793					      else
   2581  f793		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2582  f795					      endif
   2583  f795		       4c c4 f7 	      jmp	pflabel0
   2584  f798				   PF_data0
   2585  f798		       ff ff		      .byte.b	%11111111, %11111111
   2586  f79a					      if	(pfwidth>2)
   2587  f79a		       ff ff		      .byte.b	%11111111, %11111111
   2588  f79c					      endif
   2589  f79c		       80 00		      .byte.b	%10000000, %00000000
   2590  f79e					      if	(pfwidth>2)
   2591  f79e		       00 80		      .byte.b	%00000000, %10000000
   2592  f7a0					      endif
   2593  f7a0		       9c e7		      .byte.b	%10011100, %11100111
   2594  f7a2					      if	(pfwidth>2)
   2595  f7a2		       63 8d		      .byte.b	%01100011, %10001101
   2596  f7a4					      endif
   2597  f7a4		       a2 49		      .byte.b	%10100010, %01001001
   2598  f7a6					      if	(pfwidth>2)
   2599  f7a6		       52 94		      .byte.b	%01010010, %10010100
   2600  f7a8					      endif
   2601  f7a8		       a0 49		      .byte.b	%10100000, %01001001
   2602  f7aa					      if	(pfwidth>2)
   2603  f7aa		       4a a4		      .byte.b	%01001010, %10100100
   2604  f7ac					      endif
   2605  f7ac		       9c 49		      .byte.b	%10011100, %01001001
   2606  f7ae					      if	(pfwidth>2)
   2607  f7ae		       4b 94		      .byte.b	%01001011, %10010100
   2608  f7b0					      endif
   2609  f7b0		       82 47		      .byte.b	%10000010, %01000111
   2610  f7b2					      if	(pfwidth>2)
   2611  f7b2		       4a 8c		      .byte.b	%01001010, %10001100
   2612  f7b4					      endif
   2613  f7b4		       a2 41		      .byte.b	%10100010, %01000001
   2614  f7b6					      if	(pfwidth>2)
   2615  f7b6		       52 94		      .byte.b	%01010010, %10010100
   2616  f7b8					      endif
   2617  f7b8		       9c e1		      .byte.b	%10011100, %11100001
   2618  f7ba					      if	(pfwidth>2)
   2619  f7ba		       63 a5		      .byte.b	%01100011, %10100101
   2620  f7bc					      endif
   2621  f7bc		       80 00		      .byte.b	%10000000, %00000000
   2622  f7be					      if	(pfwidth>2)
   2623  f7be		       00 80		      .byte.b	%00000000, %10000000
   2624  f7c0					      endif
   2625  f7c0		       ff ff		      .byte.b	%11111111, %11111111
   2626  f7c2					      if	(pfwidth>2)
   2627  f7c2		       ff ff		      .byte.b	%11111111, %11111111
   2628  f7c4					      endif
   2629  f7c4				   pflabel0
   2630  f7c4		       bd 98 f7 	      lda	PF_data0,x
   2631  f7c7		       95 a4		      sta	playfield,x
   2632  f7c9		       ca		      dex
   2633  f7ca		       10 f8		      bpl	pflabel0
   2634  f7cc				   .L0157		;  rem RESET EVERYTHING
   2635  f7cc
   2636  f7cc				   .L0158		;  x  =  0  :	y  =  0  :  v  =  0  :	z  =  254
   2637  f7cc
   2638  f7cc		       a9 00		      LDA	#0
   2639  f7ce		       85 eb		      STA	x
   2640  f7d0		       85 ec		      STA	y
   2641  f7d2		       85 e9		      STA	v
   2642  f7d4		       a9 fe		      LDA	#254
   2643  f7d6		       85 ed		      STA	z
   2644  f7d8				   .L0159		;  ballx  =  0  :  bally  =  0
   2645  f7d8
   2646  f7d8		       a9 00		      LDA	#0
   2647  f7da		       85 84		      STA	ballx
   2648  f7dc		       85 89		      STA	bally
   2649  f7de				   .L0160		;  g  =  0
   2650  f7de
   2651  f7de		       a9 00		      LDA	#0
   2652  f7e0		       85 da		      STA	g
   2653  f7e2				   .L0161		;  COLUPF  =  15  :  COLUBK  =  0  :  scorecolor  =  0
   2654  f7e2
   2655  f7e2		       a9 0f		      LDA	#15
   2656  f7e4		       85 08		      STA	COLUPF
   2657  f7e6		       a9 00		      LDA	#0
   2658  f7e8		       85 09		      STA	COLUBK
   2659  f7ea		       85 a3		      STA	scorecolor
   2660  f7ec				   .L0162		;  rem PRESSING SPACEBAR GOES to LEVEL 1
   2661  f7ec
   2662  f7ec				   .L0163		;  if joy0fire then c	=  3
   2663  f7ec
   2664  f7ec		       24 0c		      bit	INPT4
   2665  f7ee		       30 04		      BMI	.skipL0163
   2666  f7f0				   .condpart61
   2667  f7f0		       a9 03		      LDA	#3
   2668  f7f2		       85 d6		      STA	c
   2669  f7f4				   .skipL0163
   2670  f7f4				   .L0164		;  goto mainloop
   2671  f7f4
   2672  f7f4		       4c 8f f4 	      jmp	.mainloop
   2673  f7f7
   2674  f7f7				   .
   2675  f7f7							;
   2676  f7f7
   2677  f7f7				   .monsterlevel2
   2678  f7f7							; monsterlevel2
   2679  f7f7
   2680  f7f7				   .L0165		;  playfield:
   2681  f7f7
   2682  f7f7				  -	      ifconst	pfres
   2683  f7f7				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2684  f7f7					      else
   2685  f7f7		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2686  f7f9					      endif
   2687  f7f9		       4c 28 f8 	      jmp	pflabel1
   2688  f7fc				   PF_data1
   2689  f7fc		       ff ff		      .byte.b	%11111111, %11111111
   2690  f7fe					      if	(pfwidth>2)
   2691  f7fe		       ff ff		      .byte.b	%11111111, %11111111
   2692  f800					      endif
   2693  f800		       80 00		      .byte.b	%10000000, %00000000
   2694  f802					      if	(pfwidth>2)
   2695  f802		       02 90		      .byte.b	%00000010, %10010000
   2696  f804					      endif
   2697  f804		       9c f2		      .byte.b	%10011100, %11110010
   2698  f806					      if	(pfwidth>2)
   2699  f806		       02 92		      .byte.b	%00000010, %10010010
   2700  f808					      endif
   2701  f808		       82 00		      .byte.b	%10000010, %00000000
   2702  f80a					      if	(pfwidth>2)
   2703  f80a		       30 92		      .byte.b	%00110000, %10010010
   2704  f80c					      endif
   2705  f80c		       93 09		      .byte.b	%10010011, %00001001
   2706  f80e					      if	(pfwidth>2)
   2707  f80e		       02 82		      .byte.b	%00000010, %10000010
   2708  f810					      endif
   2709  f810		       90 08		      .byte.b	%10010000, %00001000
   2710  f812					      if	(pfwidth>2)
   2711  f812		       02 f0		      .byte.b	%00000010, %11110000
   2712  f814					      endif
   2713  f814		       93 09		      .byte.b	%10010011, %00001001
   2714  f816					      if	(pfwidth>2)
   2715  f816		       30 92		      .byte.b	%00110000, %10010010
   2716  f818					      endif
   2717  f818		       82 40		      .byte.b	%10000010, %01000000
   2718  f81a					      if	(pfwidth>2)
   2719  f81a		       02 82		      .byte.b	%00000010, %10000010
   2720  f81c					      endif
   2721  f81c		       9c 02		      .byte.b	%10011100, %00000010
   2722  f81e					      if	(pfwidth>2)
   2723  f81e		       72 92		      .byte.b	%01110010, %10010010
   2724  f820					      endif
   2725  f820		       80 70		      .byte.b	%10000000, %01110000
   2726  f822					      if	(pfwidth>2)
   2727  f822		       00 80		      .byte.b	%00000000, %10000000
   2728  f824					      endif
   2729  f824		       ff ff		      .byte.b	%11111111, %11111111
   2730  f826					      if	(pfwidth>2)
   2731  f826		       ff ff		      .byte.b	%11111111, %11111111
   2732  f828					      endif
   2733  f828				   pflabel1
   2734  f828		       bd fc f7 	      lda	PF_data1,x
   2735  f82b		       95 a4		      sta	playfield,x
   2736  f82d		       ca		      dex
   2737  f82e		       10 f8		      bpl	pflabel1
   2738  f830				   .L0166		;  rem UPDATE C TO IN-LEVEL STATE
   2739  f830
   2740  f830				   .L0167		;  c  =  101
   2741  f830
   2742  f830		       a9 65		      LDA	#101
   2743  f832		       85 d6		      STA	c
   2744  f834				   .L0168		;  rem PLACE THE BUTTON
   2745  f834
   2746  f834				   .L0169		;  ballx  =  76  :  bally  =  45
   2747  f834
   2748  f834		       a9 4c		      LDA	#76
   2749  f836		       85 84		      STA	ballx
   2750  f838		       a9 2d		      LDA	#45
   2751  f83a		       85 89		      STA	bally
   2752  f83c				   .L0170		;  rem PLACE THE CHARACTERS
   2753  f83c
   2754  f83c				   .L0171		;  v  =  21  :  z  =  15
   2755  f83c
   2756  f83c		       a9 15		      LDA	#21
   2757  f83e		       85 e9		      STA	v
   2758  f840		       a9 0f		      LDA	#15
   2759  f842		       85 ed		      STA	z
   2760  f844				   .L0172		;  player1x  =  v  :  player1y  =  z
   2761  f844
   2762  f844		       a5 e9		      LDA	v
   2763  f846		       85 81		      STA	player1x
   2764  f848		       a5 ed		      LDA	z
   2765  f84a		       85 86		      STA	player1y
   2766  f84c				   .L0173		;  x  =  133  :  y  =	15
   2767  f84c
   2768  f84c		       a9 85		      LDA	#133
   2769  f84e		       85 eb		      STA	x
   2770  f850		       a9 0f		      LDA	#15
   2771  f852		       85 ec		      STA	y
   2772  f854				   .L0174		;  player0x  =  x  :  player0y  =  y
   2773  f854
   2774  f854		       a5 eb		      LDA	x
   2775  f856		       85 80		      STA	player0x
   2776  f858		       a5 ec		      LDA	y
   2777  f85a		       85 85		      STA	player0y
   2778  f85c				   .L0175		;  rem BUTTON NOT PRESSED
   2779  f85c
   2780  f85c				   .L0176		;  g  =  0
   2781  f85c
   2782  f85c		       a9 00		      LDA	#0
   2783  f85e		       85 da		      STA	g
   2784  f860				   .L0177		;  rem COLORS
   2785  f860
   2786  f860				   .L0178		;  COLUPF  =  64  :  COLUBK  =  68  :	scorecolor  =  68
   2787  f860
   2788  f860		       a9 40		      LDA	#64
   2789  f862		       85 08		      STA	COLUPF
   2790  f864		       a9 44		      LDA	#68
   2791  f866		       85 09		      STA	COLUBK
   2792  f868		       85 a3		      STA	scorecolor
   2793  f86a				   .L0179		;  return
   2794  f86a
   2795  f86a		       60		      RTS
   2796  f86b				   .
   2797  f86b							;
   2798  f86b
   2799  f86b				   .monsterlevel1
   2800  f86b							; monsterlevel1
   2801  f86b
   2802  f86b				   .L0180		;  playfield:
   2803  f86b
   2804  f86b				  -	      ifconst	pfres
   2805  f86b				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2806  f86b					      else
   2807  f86b		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2808  f86d					      endif
   2809  f86d		       4c 9c f8 	      jmp	pflabel2
   2810  f870				   PF_data2
   2811  f870		       ff ff		      .byte.b	%11111111, %11111111
   2812  f872					      if	(pfwidth>2)
   2813  f872		       ff ff		      .byte.b	%11111111, %11111111
   2814  f874					      endif
   2815  f874		       84 00		      .byte.b	%10000100, %00000000
   2816  f876					      if	(pfwidth>2)
   2817  f876		       00 90		      .byte.b	%00000000, %10010000
   2818  f878					      endif
   2819  f878		       e0 cf		      .byte.b	%11100000, %11001111
   2820  f87a					      if	(pfwidth>2)
   2821  f87a		       33 93		      .byte.b	%00110011, %10010011
   2822  f87c					      endif
   2823  f87c		       84 01		      .byte.b	%10000100, %00000001
   2824  f87e					      if	(pfwidth>2)
   2825  f87e		       02 80		      .byte.b	%00000010, %10000000
   2826  f880					      endif
   2827  f880		       9c 19		      .byte.b	%10011100, %00011001
   2828  f882					      if	(pfwidth>2)
   2829  f882		       32 fe		      .byte.b	%00110010, %11111110
   2830  f884					      endif
   2831  f884		       90 10		      .byte.b	%10010000, %00010000
   2832  f886					      if	(pfwidth>2)
   2833  f886		       20 80		      .byte.b	%00100000, %10000000
   2834  f888					      endif
   2835  f888		       93 13		      .byte.b	%10010011, %00010011
   2836  f88a					      if	(pfwidth>2)
   2837  f88a		       26 9e		      .byte.b	%00100110, %10011110
   2838  f88c					      endif
   2839  f88c		       80 02		      .byte.b	%10000000, %00000010
   2840  f88e					      if	(pfwidth>2)
   2841  f88e		       22 90		      .byte.b	%00100010, %10010000
   2842  f890					      endif
   2843  f890		       9e 72		      .byte.b	%10011110, %01110010
   2844  f892					      if	(pfwidth>2)
   2845  f892		       72 92		      .byte.b	%01110010, %10010010
   2846  f894					      endif
   2847  f894		       80 00		      .byte.b	%10000000, %00000000
   2848  f896					      if	(pfwidth>2)
   2849  f896		       00 80		      .byte.b	%00000000, %10000000
   2850  f898					      endif
   2851  f898		       ff ff		      .byte.b	%11111111, %11111111
   2852  f89a					      if	(pfwidth>2)
   2853  f89a		       ff ff		      .byte.b	%11111111, %11111111
   2854  f89c					      endif
   2855  f89c				   pflabel2
   2856  f89c		       bd 70 f8 	      lda	PF_data2,x
   2857  f89f		       95 a4		      sta	playfield,x
   2858  f8a1		       ca		      dex
   2859  f8a2		       10 f8		      bpl	pflabel2
   2860  f8a4				   .L0181		;  rem UPDATE C TO IN-LEVEL STATE
   2861  f8a4
   2862  f8a4				   .L0182		;  c  =  102
   2863  f8a4
   2864  f8a4		       a9 66		      LDA	#102
   2865  f8a6		       85 d6		      STA	c
   2866  f8a8				   .L0183		;  rem PLACE THE BUTTON
   2867  f8a8
   2868  f8a8				   .L0184		;  ballx  =  76  :  bally  =  45
   2869  f8a8
   2870  f8a8		       a9 4c		      LDA	#76
   2871  f8aa		       85 84		      STA	ballx
   2872  f8ac		       a9 2d		      LDA	#45
   2873  f8ae		       85 89		      STA	bally
   2874  f8b0				   .L0185		;  rem PLACE THE CHARACTERS
   2875  f8b0
   2876  f8b0				   .L0186		;  v  =  21  :  z  =  15
   2877  f8b0
   2878  f8b0		       a9 15		      LDA	#21
   2879  f8b2		       85 e9		      STA	v
   2880  f8b4		       a9 0f		      LDA	#15
   2881  f8b6		       85 ed		      STA	z
   2882  f8b8				   .L0187		;  player1x  =  v  :  player1y  =  z
   2883  f8b8
   2884  f8b8		       a5 e9		      LDA	v
   2885  f8ba		       85 81		      STA	player1x
   2886  f8bc		       a5 ed		      LDA	z
   2887  f8be		       85 86		      STA	player1y
   2888  f8c0				   .L0188		;  x  =  133  :  y  =	15
   2889  f8c0
   2890  f8c0		       a9 85		      LDA	#133
   2891  f8c2		       85 eb		      STA	x
   2892  f8c4		       a9 0f		      LDA	#15
   2893  f8c6		       85 ec		      STA	y
   2894  f8c8				   .L0189		;  player0x  =  x  :  player0y  =  y
   2895  f8c8
   2896  f8c8		       a5 eb		      LDA	x
   2897  f8ca		       85 80		      STA	player0x
   2898  f8cc		       a5 ec		      LDA	y
   2899  f8ce		       85 85		      STA	player0y
   2900  f8d0				   .L0190		;  rem BUTTON NOT PRESSED
   2901  f8d0
   2902  f8d0				   .L0191		;  g  =  0
   2903  f8d0
   2904  f8d0		       a9 00		      LDA	#0
   2905  f8d2		       85 da		      STA	g
   2906  f8d4				   .L0192		;  rem COLORS
   2907  f8d4
   2908  f8d4				   .L0193		;  COLUPF  =  154  :  COLUBK  =  158  :  scorecolor  =  158
   2909  f8d4
   2910  f8d4		       a9 9a		      LDA	#154
   2911  f8d6		       85 08		      STA	COLUPF
   2912  f8d8		       a9 9e		      LDA	#158
   2913  f8da		       85 09		      STA	COLUBK
   2914  f8dc		       85 a3		      STA	scorecolor
   2915  f8de				   .L0194		;  return
   2916  f8de
   2917  f8de		       60		      RTS
   2918  f8df				   .
   2919  f8df							;
   2920  f8df
   2921  f8df				   .middlelevel
   2922  f8df							; middlelevel
   2923  f8df
   2924  f8df				   .L0195		;  playfield:
   2925  f8df
   2926  f8df				  -	      ifconst	pfres
   2927  f8df				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   2928  f8df					      else
   2929  f8df		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   2930  f8e1					      endif
   2931  f8e1		       4c 10 f9 	      jmp	pflabel3
   2932  f8e4				   PF_data3
   2933  f8e4		       ff ff		      .byte.b	%11111111, %11111111
   2934  f8e6					      if	(pfwidth>2)
   2935  f8e6		       ff ff		      .byte.b	%11111111, %11111111
   2936  f8e8					      endif
   2937  f8e8		       90 04		      .byte.b	%10010000, %00000100
   2938  f8ea					      if	(pfwidth>2)
   2939  f8ea		       00 80		      .byte.b	%00000000, %10000000
   2940  f8ec					      endif
   2941  f8ec		       83 c0		      .byte.b	%10000011, %11000000
   2942  f8ee					      if	(pfwidth>2)
   2943  f8ee		       87 8f		      .byte.b	%10000111, %10001111
   2944  f8f0					      endif
   2945  f8f0		       83 80		      .byte.b	%10000011, %10000000
   2946  f8f2					      if	(pfwidth>2)
   2947  f8f2		       02 80		      .byte.b	%00000010, %10000000
   2948  f8f4					      endif
   2949  f8f4		       9c 08		      .byte.b	%10011100, %00001000
   2950  f8f6					      if	(pfwidth>2)
   2951  f8f6		       12 e2		      .byte.b	%00010010, %11100010
   2952  f8f8					      endif
   2953  f8f8		       84 08		      .byte.b	%10000100, %00001000
   2954  f8fa					      if	(pfwidth>2)
   2955  f8fa		       10 82		      .byte.b	%00010000, %10000010
   2956  f8fc					      endif
   2957  f8fc		       e4 09		      .byte.b	%11100100, %00001001
   2958  f8fe					      if	(pfwidth>2)
   2959  f8fe		       10 8e		      .byte.b	%00010000, %10001110
   2960  f900					      endif
   2961  f900		       80 c1		      .byte.b	%10000000, %11000001
   2962  f902					      if	(pfwidth>2)
   2963  f902		       82 82		      .byte.b	%10000010, %10000010
   2964  f904					      endif
   2965  f904		       9f 87		      .byte.b	%10011111, %10000111
   2966  f906					      if	(pfwidth>2)
   2967  f906		       02 82		      .byte.b	%00000010, %10000010
   2968  f908					      endif
   2969  f908		       80 00		      .byte.b	%10000000, %00000000
   2970  f90a					      if	(pfwidth>2)
   2971  f90a		       10 90		      .byte.b	%00010000, %10010000
   2972  f90c					      endif
   2973  f90c		       ff ff		      .byte.b	%11111111, %11111111
   2974  f90e					      if	(pfwidth>2)
   2975  f90e		       ff ff		      .byte.b	%11111111, %11111111
   2976  f910					      endif
   2977  f910				   pflabel3
   2978  f910		       bd e4 f8 	      lda	PF_data3,x
   2979  f913		       95 a4		      sta	playfield,x
   2980  f915		       ca		      dex
   2981  f916		       10 f8		      bpl	pflabel3
   2982  f918				   .L0196		;  rem UPDATE C TO IN-LEVEL STATE
   2983  f918
   2984  f918				   .L0197		;  c  =  103
   2985  f918
   2986  f918		       a9 67		      LDA	#103
   2987  f91a		       85 d6		      STA	c
   2988  f91c				   .L0198		;  rem PLACE THE BUTTON
   2989  f91c
   2990  f91c				   .L0199		;  ballx  =  76  :  bally  =  45
   2991  f91c
   2992  f91c		       a9 4c		      LDA	#76
   2993  f91e		       85 84		      STA	ballx
   2994  f920		       a9 2d		      LDA	#45
   2995  f922		       85 89		      STA	bally
   2996  f924				   .L0200		;  rem PLACE THE CHARACTERS
   2997  f924
   2998  f924				   .L0201		;  v  =  21  :  z  =  15
   2999  f924
   3000  f924		       a9 15		      LDA	#21
   3001  f926		       85 e9		      STA	v
   3002  f928		       a9 0f		      LDA	#15
   3003  f92a		       85 ed		      STA	z
   3004  f92c				   .L0202		;  player1x  =  v  :  player1y  =  z
   3005  f92c
   3006  f92c		       a5 e9		      LDA	v
   3007  f92e		       85 81		      STA	player1x
   3008  f930		       a5 ed		      LDA	z
   3009  f932		       85 86		      STA	player1y
   3010  f934				   .L0203		;  x  =  133  :  y  =	15
   3011  f934
   3012  f934		       a9 85		      LDA	#133
   3013  f936		       85 eb		      STA	x
   3014  f938		       a9 0f		      LDA	#15
   3015  f93a		       85 ec		      STA	y
   3016  f93c				   .L0204		;  player0x  =  x  :  player0y  =  y
   3017  f93c
   3018  f93c		       a5 eb		      LDA	x
   3019  f93e		       85 80		      STA	player0x
   3020  f940		       a5 ec		      LDA	y
   3021  f942		       85 85		      STA	player0y
   3022  f944				   .L0205		;  rem BUTTON NOT PRESSED
   3023  f944
   3024  f944				   .L0206		;  g  =  0
   3025  f944
   3026  f944		       a9 00		      LDA	#0
   3027  f946		       85 da		      STA	g
   3028  f948				   .L0207		;  rem COLORS
   3029  f948
   3030  f948				   .L0208		;  COLUPF  =  4  :  COLUBK  =	8  :  scorecolor  =  8
   3031  f948
   3032  f948		       a9 04		      LDA	#4
   3033  f94a		       85 08		      STA	COLUPF
   3034  f94c		       a9 08		      LDA	#8
   3035  f94e		       85 09		      STA	COLUBK
   3036  f950		       85 a3		      STA	scorecolor
   3037  f952				   .L0209		;  return
   3038  f952
   3039  f952		       60		      RTS
   3040  f953				   .
   3041  f953							;
   3042  f953
   3043  f953				   .humanlevel1
   3044  f953							; humanlevel1
   3045  f953
   3046  f953				   .L0210		;  playfield:
   3047  f953
   3048  f953				  -	      ifconst	pfres
   3049  f953				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3050  f953					      else
   3051  f953		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3052  f955					      endif
   3053  f955		       4c 84 f9 	      jmp	pflabel4
   3054  f958				   PF_data4
   3055  f958		       ff ff		      .byte.b	%11111111, %11111111
   3056  f95a					      if	(pfwidth>2)
   3057  f95a		       ff ff		      .byte.b	%11111111, %11111111
   3058  f95c					      endif
   3059  f95c		       90 01		      .byte.b	%10010000, %00000001
   3060  f95e					      if	(pfwidth>2)
   3061  f95e		       02 80		      .byte.b	%00000010, %10000000
   3062  f960					      endif
   3063  f960		       90 39		      .byte.b	%10010000, %00111001
   3064  f962					      if	(pfwidth>2)
   3065  f962		       72 80		      .byte.b	%01110010, %10000000
   3066  f964					      endif
   3067  f964		       90 01		      .byte.b	%10010000, %00000001
   3068  f966					      if	(pfwidth>2)
   3069  f966		       02 90		      .byte.b	%00000010, %10010000
   3070  f968					      endif
   3071  f968		       82 38		      .byte.b	%10000010, %00111000
   3072  f96a					      if	(pfwidth>2)
   3073  f96a		       70 82		      .byte.b	%01110000, %10000010
   3074  f96c					      endif
   3075  f96c		       82 08		      .byte.b	%10000010, %00001000
   3076  f96e					      if	(pfwidth>2)
   3077  f96e		       00 82		      .byte.b	%00000000, %10000010
   3078  f970					      endif
   3079  f970		       82 38		      .byte.b	%10000010, %00111000
   3080  f972					      if	(pfwidth>2)
   3081  f972		       70 82		      .byte.b	%01110000, %10000010
   3082  f974					      endif
   3083  f974		       90 01		      .byte.b	%10010000, %00000001
   3084  f976					      if	(pfwidth>2)
   3085  f976		       02 90		      .byte.b	%00000010, %10010000
   3086  f978					      endif
   3087  f978		       80 38		      .byte.b	%10000000, %00111000
   3088  f97a					      if	(pfwidth>2)
   3089  f97a		       70 90		      .byte.b	%01110000, %10010000
   3090  f97c					      endif
   3091  f97c		       80 00		      .byte.b	%10000000, %00000000
   3092  f97e					      if	(pfwidth>2)
   3093  f97e		       00 80		      .byte.b	%00000000, %10000000
   3094  f980					      endif
   3095  f980		       ff ff		      .byte.b	%11111111, %11111111
   3096  f982					      if	(pfwidth>2)
   3097  f982		       ff ff		      .byte.b	%11111111, %11111111
   3098  f984					      endif
   3099  f984				   pflabel4
   3100  f984		       bd 58 f9 	      lda	PF_data4,x
   3101  f987		       95 a4		      sta	playfield,x
   3102  f989		       ca		      dex
   3103  f98a		       10 f8		      bpl	pflabel4
   3104  f98c				   .L0211		;  rem UPDATE C TO IN-LEVEL STATE
   3105  f98c
   3106  f98c				   .L0212		;  c  =  104
   3107  f98c
   3108  f98c		       a9 68		      LDA	#104
   3109  f98e		       85 d6		      STA	c
   3110  f990				   .L0213		;  rem PLACE THE BUTTON
   3111  f990
   3112  f990				   .L0214		;  ballx  =  78 :  bally  =  45
   3113  f990
   3114  f990		       a9 4e		      LDA	#78
   3115  f992		       85 84		      STA	ballx
   3116  f994		       a9 2d		      LDA	#45
   3117  f996		       85 89		      STA	bally
   3118  f998				   .L0215		;  rem PLACE THE CHARACTERS
   3119  f998
   3120  f998				   .L0216		;  v  =  21  :  z  =  15
   3121  f998
   3122  f998		       a9 15		      LDA	#21
   3123  f99a		       85 e9		      STA	v
   3124  f99c		       a9 0f		      LDA	#15
   3125  f99e		       85 ed		      STA	z
   3126  f9a0				   .L0217		;  player1x  =  v  :  player1y  =  z
   3127  f9a0
   3128  f9a0		       a5 e9		      LDA	v
   3129  f9a2		       85 81		      STA	player1x
   3130  f9a4		       a5 ed		      LDA	z
   3131  f9a6		       85 86		      STA	player1y
   3132  f9a8				   .L0218		;  x  =  133  :  y  =	15
   3133  f9a8
   3134  f9a8		       a9 85		      LDA	#133
   3135  f9aa		       85 eb		      STA	x
   3136  f9ac		       a9 0f		      LDA	#15
   3137  f9ae		       85 ec		      STA	y
   3138  f9b0				   .L0219		;  player0x  =  x  :  player0y  =  y
   3139  f9b0
   3140  f9b0		       a5 eb		      LDA	x
   3141  f9b2		       85 80		      STA	player0x
   3142  f9b4		       a5 ec		      LDA	y
   3143  f9b6		       85 85		      STA	player0y
   3144  f9b8				   .L0220		;  rem BUTTON NOT PRESSED
   3145  f9b8
   3146  f9b8				   .L0221		;  g  =  0
   3147  f9b8
   3148  f9b8		       a9 00		      LDA	#0
   3149  f9ba		       85 da		      STA	g
   3150  f9bc				   .L0222		;  rem COLORS
   3151  f9bc
   3152  f9bc				   .L0223		;  COLUPF  =  24  :  COLUBK  =  28  :	scorecolor  =  28
   3153  f9bc
   3154  f9bc		       a9 18		      LDA	#24
   3155  f9be		       85 08		      STA	COLUPF
   3156  f9c0		       a9 1c		      LDA	#28
   3157  f9c2		       85 09		      STA	COLUBK
   3158  f9c4		       85 a3		      STA	scorecolor
   3159  f9c6				   .L0224		;  return
   3160  f9c6
   3161  f9c6		       60		      RTS
   3162  f9c7				   .
   3163  f9c7							;
   3164  f9c7
   3165  f9c7				   .humanlevel2
   3166  f9c7							; humanlevel2
   3167  f9c7
   3168  f9c7				   .L0225		;  playfield:
   3169  f9c7
   3170  f9c7				  -	      ifconst	pfres
   3171  f9c7				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3172  f9c7					      else
   3173  f9c7		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3174  f9c9					      endif
   3175  f9c9		       4c f8 f9 	      jmp	pflabel5
   3176  f9cc				   PF_data5
   3177  f9cc		       ff ff		      .byte.b	%11111111, %11111111
   3178  f9ce					      if	(pfwidth>2)
   3179  f9ce		       ff ff		      .byte.b	%11111111, %11111111
   3180  f9d0					      endif
   3181  f9d0		       80 00		      .byte.b	%10000000, %00000000
   3182  f9d2					      if	(pfwidth>2)
   3183  f9d2		       00 80		      .byte.b	%00000000, %10000000
   3184  f9d4					      endif
   3185  f9d4		       9f f9		      .byte.b	%10011111, %11111001
   3186  f9d6					      if	(pfwidth>2)
   3187  f9d6		       9f 9c		      .byte.b	%10011111, %10011100
   3188  f9d8					      endif
   3189  f9d8		       90 08		      .byte.b	%10010000, %00001000
   3190  f9da					      if	(pfwidth>2)
   3191  f9da		       00 90		      .byte.b	%00000000, %10010000
   3192  f9dc					      endif
   3193  f9dc		       90 08		      .byte.b	%10010000, %00001000
   3194  f9de					      if	(pfwidth>2)
   3195  f9de		       01 90		      .byte.b	%00000001, %10010000
   3196  f9e0					      endif
   3197  f9e0		       90 08		      .byte.b	%10010000, %00001000
   3198  f9e2					      if	(pfwidth>2)
   3199  f9e2		       01 80		      .byte.b	%00000001, %10000000
   3200  f9e4					      endif
   3201  f9e4		       90 08		      .byte.b	%10010000, %00001000
   3202  f9e6					      if	(pfwidth>2)
   3203  f9e6		       01 90		      .byte.b	%00000001, %10010000
   3204  f9e8					      endif
   3205  f9e8		       80 00		      .byte.b	%10000000, %00000000
   3206  f9ea					      if	(pfwidth>2)
   3207  f9ea		       01 90		      .byte.b	%00000001, %10010000
   3208  f9ec					      endif
   3209  f9ec		       9f f9		      .byte.b	%10011111, %11111001
   3210  f9ee					      if	(pfwidth>2)
   3211  f9ee		       9f 98		      .byte.b	%10011111, %10011000
   3212  f9f0					      endif
   3213  f9f0		       80 00		      .byte.b	%10000000, %00000000
   3214  f9f2					      if	(pfwidth>2)
   3215  f9f2		       00 80		      .byte.b	%00000000, %10000000
   3216  f9f4					      endif
   3217  f9f4		       ff ff		      .byte.b	%11111111, %11111111
   3218  f9f6					      if	(pfwidth>2)
   3219  f9f6		       ff ff		      .byte.b	%11111111, %11111111
   3220  f9f8					      endif
   3221  f9f8				   pflabel5
   3222  f9f8		       bd cc f9 	      lda	PF_data5,x
   3223  f9fb		       95 a4		      sta	playfield,x
   3224  f9fd		       ca		      dex
   3225  f9fe		       10 f8		      bpl	pflabel5
   3226  fa00				   .
   3227  fa00							;
   3228  fa00
   3229  fa00				   .L0226		;  rem UPDATE C TO IN-LEVEL STATE
   3230  fa00
   3231  fa00				   .L0227		;  c  =  105
   3232  fa00
   3233  fa00		       a9 69		      LDA	#105
   3234  fa02		       85 d6		      STA	c
   3235  fa04				   .L0228		;  rem PLACE THE BUTTON
   3236  fa04
   3237  fa04				   .L0229		;  ballx  =  86 :  bally  =  45
   3238  fa04
   3239  fa04		       a9 56		      LDA	#86
   3240  fa06		       85 84		      STA	ballx
   3241  fa08		       a9 2d		      LDA	#45
   3242  fa0a		       85 89		      STA	bally
   3243  fa0c				   .L0230		;  rem PLACE THE CHARACTERS
   3244  fa0c
   3245  fa0c				   .L0231		;  v  =  21  :  z  =  15
   3246  fa0c
   3247  fa0c		       a9 15		      LDA	#21
   3248  fa0e		       85 e9		      STA	v
   3249  fa10		       a9 0f		      LDA	#15
   3250  fa12		       85 ed		      STA	z
   3251  fa14				   .L0232		;  player1x  =  v  :  player1y  =  z
   3252  fa14
   3253  fa14		       a5 e9		      LDA	v
   3254  fa16		       85 81		      STA	player1x
   3255  fa18		       a5 ed		      LDA	z
   3256  fa1a		       85 86		      STA	player1y
   3257  fa1c				   .L0233		;  x  =  133  :  y  =	15
   3258  fa1c
   3259  fa1c		       a9 85		      LDA	#133
   3260  fa1e		       85 eb		      STA	x
   3261  fa20		       a9 0f		      LDA	#15
   3262  fa22		       85 ec		      STA	y
   3263  fa24				   .L0234		;  player0x  =  x  :  player0y  =  y
   3264  fa24
   3265  fa24		       a5 eb		      LDA	x
   3266  fa26		       85 80		      STA	player0x
   3267  fa28		       a5 ec		      LDA	y
   3268  fa2a		       85 85		      STA	player0y
   3269  fa2c				   .L0235		;  rem BUTTON NOT PRESSED
   3270  fa2c
   3271  fa2c				   .L0236		;  g  =  0
   3272  fa2c
   3273  fa2c		       a9 00		      LDA	#0
   3274  fa2e		       85 da		      STA	g
   3275  fa30				   .L0237		;  rem COLORS
   3276  fa30
   3277  fa30				   .L0238		;  COLUPF  =  104  :  COLUBK  =  108  :  scorecolor  =  108
   3278  fa30
   3279  fa30		       a9 68		      LDA	#104
   3280  fa32		       85 08		      STA	COLUPF
   3281  fa34		       a9 6c		      LDA	#108
   3282  fa36		       85 09		      STA	COLUBK
   3283  fa38		       85 a3		      STA	scorecolor
   3284  fa3a				   .L0239		;  return
   3285  fa3a
   3286  fa3a		       60		      RTS
   3287  fa3b				   .
   3288  fa3b							;
   3289  fa3b
   3290  fa3b				   .gameover
   3291  fa3b							; gameover
   3292  fa3b
   3293  fa3b				   .L0240		;  playfield:
   3294  fa3b
   3295  fa3b				  -	      ifconst	pfres
   3296  fa3b				  -	      ldx	#(11>pfres)*(pfres*pfwidth-1)+(11<=pfres)*43
   3297  fa3b					      else
   3298  fa3b		       a2 2b		      ldx	#((11*pfwidth-1)*((11*pfwidth-1)<47))+(47*((11*pfwidth-1)>=47))
   3299  fa3d					      endif
   3300  fa3d		       4c 6c fa 	      jmp	pflabel6
   3301  fa40				   PF_data6
   3302  fa40		       3c 08		      .byte.b	%00111100, %00001000
   3303  fa42					      if	(pfwidth>2)
   3304  fa42		       c3 3c		      .byte.b	%11000011, %00111100
   3305  fa44					      endif
   3306  fa44		       42 14		      .byte.b	%01000010, %00010100
   3307  fa46					      if	(pfwidth>2)
   3308  fa46		       a5 04		      .byte.b	%10100101, %00000100
   3309  fa48					      endif
   3310  fa48		       40 22		      .byte.b	%01000000, %00100010
   3311  fa4a					      if	(pfwidth>2)
   3312  fa4a		       a5 1c		      .byte.b	%10100101, %00011100
   3313  fa4c					      endif
   3314  fa4c		       66 3e		      .byte.b	%01100110, %00111110
   3315  fa4e					      if	(pfwidth>2)
   3316  fa4e		       99 04		      .byte.b	%10011001, %00000100
   3317  fa50					      endif
   3318  fa50		       3a 22		      .byte.b	%00111010, %00100010
   3319  fa52					      if	(pfwidth>2)
   3320  fa52		       99 3c		      .byte.b	%10011001, %00111100
   3321  fa54					      endif
   3322  fa54		       00 00		      .byte.b	%00000000, %00000000
   3323  fa56					      if	(pfwidth>2)
   3324  fa56		       00 00		      .byte.b	%00000000, %00000000
   3325  fa58					      endif
   3326  fa58		       3c 82		      .byte.b	%00111100, %10000010
   3327  fa5a					      if	(pfwidth>2)
   3328  fa5a		       3e 1e		      .byte.b	%00111110, %00011110
   3329  fa5c					      endif
   3330  fa5c		       42 82		      .byte.b	%01000010, %10000010
   3331  fa5e					      if	(pfwidth>2)
   3332  fa5e		       20 22		      .byte.b	%00100000, %00100010
   3333  fa60					      endif
   3334  fa60		       42 44		      .byte.b	%01000010, %01000100
   3335  fa62					      if	(pfwidth>2)
   3336  fa62		       3c 1e		      .byte.b	%00111100, %00011110
   3337  fa64					      endif
   3338  fa64		       42 44		      .byte.b	%01000010, %01000100
   3339  fa66					      if	(pfwidth>2)
   3340  fa66		       20 32		      .byte.b	%00100000, %00110010
   3341  fa68					      endif
   3342  fa68		       3c 38		      .byte.b	%00111100, %00111000
   3343  fa6a					      if	(pfwidth>2)
   3344  fa6a		       3e 22		      .byte.b	%00111110, %00100010
   3345  fa6c					      endif
   3346  fa6c				   pflabel6
   3347  fa6c		       bd 40 fa 	      lda	PF_data6,x
   3348  fa6f		       95 a4		      sta	playfield,x
   3349  fa71		       ca		      dex
   3350  fa72		       10 f8		      bpl	pflabel6
   3351  fa74				   .L0241		;  rem MOVE PLAYERS off SCREEN
   3352  fa74
   3353  fa74				   .L0242		;  player0x  =  0  :  player0y  =  0  :  player1x  =  0  :  player1y  =  100
   3354  fa74
   3355  fa74		       a9 00		      LDA	#0
   3356  fa76		       85 80		      STA	player0x
   3357  fa78		       85 85		      STA	player0y
   3358  fa7a		       85 81		      STA	player1x
   3359  fa7c		       a9 64		      LDA	#100
   3360  fa7e		       85 86		      STA	player1y
   3361  fa80				   .L0243		;  rem REMOVE THE BALL
   3362  fa80
   3363  fa80				   .L0244		;  ballx  =  0  :  bally  =  200
   3364  fa80
   3365  fa80		       a9 00		      LDA	#0
   3366  fa82		       85 84		      STA	ballx
   3367  fa84		       a9 c8		      LDA	#200
   3368  fa86		       85 89		      STA	bally
   3369  fa88				   .L0245		;  rem PRESSING SPACEBAR PUTS US BACK AT THE START
   3370  fa88
   3371  fa88				   .L0246		;  if !joy0fire  &&  g  =  99 then c  =   - 1
   3372  fa88
   3373  fa88		       24 0c		      bit	INPT4
   3374  fa8a		       10 0a		      BPL	.skipL0246
   3375  fa8c				   .condpart62
   3376  fa8c		       a5 da		      LDA	g
   3377  fa8e		       c9 63		      CMP	#99
   3378  fa90		       d0 04		      BNE	.skip62then
   3379  fa92				   .condpart63
   3380  fa92		       a9 ff		      LDA	#255
   3381  fa94		       85 d6		      STA	c
   3382  fa96				   .skip62then
   3383  fa96				   .skipL0246
   3384  fa96				   .L0247		;  if joy0fire then g	=  99
   3385  fa96
   3386  fa96		       24 0c		      bit	INPT4
   3387  fa98		       30 04		      BMI	.skipL0247
   3388  fa9a				   .condpart64
   3389  fa9a		       a9 63		      LDA	#99
   3390  fa9c		       85 da		      STA	g
   3391  fa9e				   .skipL0247
   3392  fa9e				   .L0248		;  goto mainloop
   3393  fa9e
   3394  fa9e		       4c 8f f4 	      jmp	.mainloop
   3395  faa1
   3396  faa1				   .
   3397  faa1							;
   3398  faa1
   3399  faa1				   .
   3400  faa1							;
   3401  faa1
   3402  faa1				   .
   3403  faa1							;
   3404  faa1
   3405  faa1				  -	      if	(<*) > (<(*+6))
   3406  faa1				  -	      repeat	($100-<*)
   3407  faa1				  -	      .byte	0
   3408  faa1				  -	      repend
   3409  faa1					      endif
   3410  faa1				   playerL030_0
   3411  faa1		       a5		      .byte.b	%10100101
   3412  faa2		       a5		      .byte.b	%10100101
   3413  faa3		       5a		      .byte.b	%01011010
   3414  faa4		       3c		      .byte.b	%00111100
   3415  faa5		       24		      .byte.b	%00100100
   3416  faa6		       5a		      .byte.b	%01011010
   3417  faa7		       c3		      .byte.b	%11000011
   3418  faa8				  -	      if	(<*) > (<(*+6))
   3419  faa8				  -	      repeat	($100-<*)
   3420  faa8				  -	      .byte	0
   3421  faa8				  -	      repend
   3422  faa8					      endif
   3423  faa8				   playerL032_1
   3424  faa8		       66		      .byte.b	%01100110
   3425  faa9		       24		      .byte.b	%00100100
   3426  faaa		       18		      .byte.b	%00011000
   3427  faab		       18		      .byte.b	%00011000
   3428  faac		       7e		      .byte.b	%01111110
   3429  faad		       4a		      .byte.b	%01001010
   3430  faae		       9a		      .byte.b	%10011010
   3431  faaf					      if	ECHOFIRST
      1261 bytes of ROM space left
   3432  faaf					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left")
   3433  faaf					      endif
   3434  faaf		       00 01	   ECHOFIRST  =	1
   3435  faaf
   3436  faaf
   3437  faaf
   3438  faaf							; feel free to modify the score graphics - just keep each digit 8 high
   3439  faaf							; and keep the conditional compilation stuff intact
   3440  faaf				  -	      ifconst	ROM2k
   3441  faaf				  -	      ORG	$F7AC-8
   3442  faaf					      else
   3443  faaf				  -	      ifconst	bankswitch
   3444  faaf				  -	      if	bankswitch == 8
   3445  faaf				  -	      ORG	$2F94-bscode_length
   3446  faaf				  -	      RORG	$FF94-bscode_length
   3447  faaf				  -	      endif
   3448  faaf				  -	      if	bankswitch == 16
   3449  faaf				  -	      ORG	$4F94-bscode_length
   3450  faaf				  -	      RORG	$FF94-bscode_length
   3451  faaf				  -	      endif
   3452  faaf				  -	      if	bankswitch == 32
   3453  faaf				  -	      ORG	$8F94-bscode_length
   3454  faaf				  -	      RORG	$FF94-bscode_length
   3455  faaf				  -	      endif
   3456  faaf				  -	      if	bankswitch == 64
   3457  faaf				  -	      ORG	$10F80-bscode_length
   3458  faaf				  -	      RORG	$1FF80-bscode_length
   3459  faaf				  -	      endif
   3460  faaf					      else
   3461  ff9c					      ORG	$FF9C
   3462  ff9c					      endif
   3463  ff9c					      endif
   3464  ff9c
   3465  ff9c							; font equates
   3466  ff9c		       00 01	   .21stcentury =	1
   3467  ff9c		       00 02	   alarmclock =	2
   3468  ff9c		       00 03	   handwritten =	3
   3469  ff9c		       00 04	   interrupted =	4
   3470  ff9c		       00 05	   retroputer =	5
   3471  ff9c		       00 06	   whimsey    =	6
   3472  ff9c		       00 07	   tiny       =	7
   3473  ff9c
   3474  ff9c				   scoretable
   3475  ff9c
   3476  ff9c				  -	      ifconst	font
   3477  ff9c				  -	      if	font == .21stcentury
   3478  ff9c				  -	      include	"score_graphics.asm.21stcentury"
   3479  ff9c				  -	      endif
   3480  ff9c				  -	      if	font == alarmclock
   3481  ff9c				  -	      include	"score_graphics.asm.alarmclock"
   3482  ff9c				  -	      endif
   3483  ff9c				  -	      if	font == handwritten
   3484  ff9c				  -	      include	"score_graphics.asm.handwritten"
   3485  ff9c				  -	      endif
   3486  ff9c				  -	      if	font == interrupted
   3487  ff9c				  -	      include	"score_graphics.asm.interrupted"
   3488  ff9c				  -	      endif
   3489  ff9c				  -	      if	font == retroputer
   3490  ff9c				  -	      include	"score_graphics.asm.retroputer"
   3491  ff9c				  -	      endif
   3492  ff9c				  -	      if	font == whimsey
   3493  ff9c				  -	      include	"score_graphics.asm.whimsey"
   3494  ff9c				  -	      endif
   3495  ff9c				  -	      if	font == tiny
   3496  ff9c				  -	      include	"score_graphics.asm.tiny"
   3497  ff9c				  -	      endif
   3498  ff9c					      else		; default font
   3499  ff9c
   3500  ff9c		       3c		      .byte.b	%00111100
   3501  ff9d		       66		      .byte.b	%01100110
   3502  ff9e		       66		      .byte.b	%01100110
   3503  ff9f		       66		      .byte.b	%01100110
   3504  ffa0		       66		      .byte.b	%01100110
   3505  ffa1		       66		      .byte.b	%01100110
   3506  ffa2		       66		      .byte.b	%01100110
   3507  ffa3		       3c		      .byte.b	%00111100
   3508  ffa4
   3509  ffa4		       7e		      .byte.b	%01111110
   3510  ffa5		       18		      .byte.b	%00011000
   3511  ffa6		       18		      .byte.b	%00011000
   3512  ffa7		       18		      .byte.b	%00011000
   3513  ffa8		       18		      .byte.b	%00011000
   3514  ffa9		       38		      .byte.b	%00111000
   3515  ffaa		       18		      .byte.b	%00011000
   3516  ffab		       08		      .byte.b	%00001000
   3517  ffac
   3518  ffac		       7e		      .byte.b	%01111110
   3519  ffad		       60		      .byte.b	%01100000
   3520  ffae		       60		      .byte.b	%01100000
   3521  ffaf		       3c		      .byte.b	%00111100
   3522  ffb0		       06		      .byte.b	%00000110
   3523  ffb1		       06		      .byte.b	%00000110
   3524  ffb2		       46		      .byte.b	%01000110
   3525  ffb3		       3c		      .byte.b	%00111100
   3526  ffb4
   3527  ffb4		       3c		      .byte.b	%00111100
   3528  ffb5		       46		      .byte.b	%01000110
   3529  ffb6		       06		      .byte.b	%00000110
   3530  ffb7		       06		      .byte.b	%00000110
   3531  ffb8		       1c		      .byte.b	%00011100
   3532  ffb9		       06		      .byte.b	%00000110
   3533  ffba		       46		      .byte.b	%01000110
   3534  ffbb		       3c		      .byte.b	%00111100
   3535  ffbc
   3536  ffbc		       0c		      .byte.b	%00001100
   3537  ffbd		       0c		      .byte.b	%00001100
   3538  ffbe		       7e		      .byte.b	%01111110
   3539  ffbf		       4c		      .byte.b	%01001100
   3540  ffc0		       4c		      .byte.b	%01001100
   3541  ffc1		       2c		      .byte.b	%00101100
   3542  ffc2		       1c		      .byte.b	%00011100
   3543  ffc3		       0c		      .byte.b	%00001100
   3544  ffc4
   3545  ffc4		       3c		      .byte.b	%00111100
   3546  ffc5		       46		      .byte.b	%01000110
   3547  ffc6		       06		      .byte.b	%00000110
   3548  ffc7		       06		      .byte.b	%00000110
   3549  ffc8		       3c		      .byte.b	%00111100
   3550  ffc9		       60		      .byte.b	%01100000
   3551  ffca		       60		      .byte.b	%01100000
   3552  ffcb		       7e		      .byte.b	%01111110
   3553  ffcc
   3554  ffcc		       3c		      .byte.b	%00111100
   3555  ffcd		       66		      .byte.b	%01100110
   3556  ffce		       66		      .byte.b	%01100110
   3557  ffcf		       66		      .byte.b	%01100110
   3558  ffd0		       7c		      .byte.b	%01111100
   3559  ffd1		       60		      .byte.b	%01100000
   3560  ffd2		       62		      .byte.b	%01100010
   3561  ffd3		       3c		      .byte.b	%00111100
   3562  ffd4
   3563  ffd4		       30		      .byte.b	%00110000
   3564  ffd5		       30		      .byte.b	%00110000
   3565  ffd6		       30		      .byte.b	%00110000
   3566  ffd7		       18		      .byte.b	%00011000
   3567  ffd8		       0c		      .byte.b	%00001100
   3568  ffd9		       06		      .byte.b	%00000110
   3569  ffda		       42		      .byte.b	%01000010
   3570  ffdb		       3e		      .byte.b	%00111110
   3571  ffdc
   3572  ffdc		       3c		      .byte.b	%00111100
   3573  ffdd		       66		      .byte.b	%01100110
   3574  ffde		       66		      .byte.b	%01100110
   3575  ffdf		       66		      .byte.b	%01100110
   3576  ffe0		       3c		      .byte.b	%00111100
   3577  ffe1		       66		      .byte.b	%01100110
   3578  ffe2		       66		      .byte.b	%01100110
   3579  ffe3		       3c		      .byte.b	%00111100
   3580  ffe4
   3581  ffe4		       3c		      .byte.b	%00111100
   3582  ffe5		       46		      .byte.b	%01000110
   3583  ffe6		       06		      .byte.b	%00000110
   3584  ffe7		       3e		      .byte.b	%00111110
   3585  ffe8		       66		      .byte.b	%01100110
   3586  ffe9		       66		      .byte.b	%01100110
   3587  ffea		       66		      .byte.b	%01100110
   3588  ffeb		       3c		      .byte.b	%00111100
   3589  ffec
   3590  ffec					      ifnconst	DPC_kernel_options
   3591  ffec
   3592  ffec		       00		      .byte.b	%00000000
   3593  ffed		       00		      .byte.b	%00000000
   3594  ffee		       00		      .byte.b	%00000000
   3595  ffef		       00		      .byte.b	%00000000
   3596  fff0		       00		      .byte.b	%00000000
   3597  fff1		       00		      .byte.b	%00000000
   3598  fff2		       00		      .byte.b	%00000000
   3599  fff3		       00		      .byte.b	%00000000
   3600  fff4
   3601  fff4					      endif
   3602  fff4
   3603  fff4					      endif
   3604  fff4
   3605  fff4				  -	      ifconst	ROM2k
   3606  fff4				  -	      ORG	$F7FC
   3607  fff4					      else
   3608  fff4				  -	      ifconst	bankswitch
   3609  fff4				  -	      if	bankswitch == 8
   3610  fff4				  -	      ORG	$2FF4-bscode_length
   3611  fff4				  -	      RORG	$FFF4-bscode_length
   3612  fff4				  -	      endif
   3613  fff4				  -	      if	bankswitch == 16
   3614  fff4				  -	      ORG	$4FF4-bscode_length
   3615  fff4				  -	      RORG	$FFF4-bscode_length
   3616  fff4				  -	      endif
   3617  fff4				  -	      if	bankswitch == 32
   3618  fff4				  -	      ORG	$8FF4-bscode_length
   3619  fff4				  -	      RORG	$FFF4-bscode_length
   3620  fff4				  -	      endif
   3621  fff4				  -	      if	bankswitch == 64
   3622  fff4				  -	      ORG	$10FE0-bscode_length
   3623  fff4				  -	      RORG	$1FFE0-bscode_length
   3624  fff4				  -	      endif
   3625  fff4					      else
   3626  fffc					      ORG	$FFFC
   3627  fffc					      endif
   3628  fffc					      endif
   3629  fffc				  -	      ifconst	bankswitch
   3630  fffc				  -	      if	bankswitch == 8
   3631  fffc				  -	      ORG	$2FFC
   3632  fffc				  -	      RORG	$FFFC
   3633  fffc				  -	      endif
   3634  fffc				  -	      if	bankswitch == 16
   3635  fffc				  -	      ORG	$4FFC
   3636  fffc				  -	      RORG	$FFFC
   3637  fffc				  -	      endif
   3638  fffc				  -	      if	bankswitch == 32
   3639  fffc				  -	      ORG	$8FFC
   3640  fffc				  -	      RORG	$FFFC
   3641  fffc				  -	      endif
   3642  fffc				  -	      if	bankswitch == 64
   3643  fffc				  -	      ORG	$10FF0
   3644  fffc				  -	      RORG	$1FFF0
   3645  fffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   3646  fffc				  -	      ORG	$10FF8
   3647  fffc				  -	      RORG	$1FFF8
   3648  fffc				  -	      ifconst	superchip
   3649  fffc				  -	      .byte	"E","F","S","C"
   3650  fffc				  -	      else
   3651  fffc				  -	      .byte	"E","F","E","F"
   3652  fffc				  -	      endif
   3653  fffc				  -	      ORG	$10FFC
   3654  fffc				  -	      RORG	$1FFFC
   3655  fffc				  -	      endif
   3656  fffc					      else
   3657  fffc				  -	      ifconst	ROM2k
   3658  fffc				  -	      ORG	$F7FC
   3659  fffc					      else
   3660  fffc					      ORG	$FFFC
   3661  fffc					      endif
   3662  fffc					      endif
   3663  fffc		       00 f0		      .word.w	start
   3664  fffe		       00 f0		      .word.w	start
